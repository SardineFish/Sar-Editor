using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices.WindowsRuntime;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;
using SardineFish.UWP.Controls;

//“空白页”项模板在 http://go.microsoft.com/fwlink/?LinkId=402352&clcid=0x409 上有介绍

namespace SardineFish.UWP.Test
{
    /// <summary>
    /// 可用于自身或导航至 Frame 内部的空白页。
    /// </summary>
    public sealed partial class MainPage : Page
    {
        public MainPage()
        {
            this.InitializeComponent();

            CodeText code = new CodeText();
            code.Text = "window.SardineFish = (function (sar)\r\n{\r\n    try\r\n    {\r\n        if (!sar)\r\n            sar = function () { };\r\n        sar.Version = 0.20;\r\n        sar.Web = (function (web)\r\n        {\r\n            if (!web)\r\n                web = function () { };\r\n            return web;\r\n        })(sar.Web);\r\n        window.requestAnimationFrame =\r\n            window.requestAnimationFrame ||\r\n            window.mozRequestAnimationFrame ||\r\n            window.webkitRequestAnimationFrame ||\r\n            window.msRequestAnimationFrame;\r\n        sar.Web.Engine2D = (function (engine)\r\n        {\r\n            if (!engine)\r\n                engine = {};\r\n            return engine;\r\n        })(sar.Web.Engine2D);\r\n        engine = sar.Web.Engine2D;\r\n        engine.debug = function () { }\r\n        engine.onError = null;\r\n        engine.debug.write = null;\r\n        engine.debug.writeLine = function (text, canvas)\r\n        {\r\n            if (!engine.debug.write)\r\n                return;\r\n            engine.debug.write(text + \"\r\n\");\r\n\r\n        }\r\n        engine.debug.clear = null;\r\n\r\n        //-------LinkList\r\n        function LinkList()\r\n        {\r\n            this.head = null;\r\n            this.tail = null;\r\n            this.count = 0;\r\n        }\r\n        LinkList.version = 1.2;\r\n        LinkList.Node = function (obj, last, next)\r\n        {\r\n            this.object = obj;\r\n            if (last)\r\n                this.last = last;\r\n            else\r\n                this.last = null;\r\n            if (next)\r\n                this.next = next;\r\n            else\r\n                this.next = null;\r\n        }\r\n        LinkList.prototype.add = function (obj)\r\n        {\r\n            if (this.count <= 0)\r\n            {\r\n                this.head = new LinkList.Node(obj, null, null);\r\n                this.head.parent = this;\r\n                this.tail = this.head;\r\n                this.count = 1;\r\n                return this.head;\r\n            }\r\n            var node = new LinkList.Node(obj, this.tail, null);\r\n            node.parent = this;\r\n            this.tail.next = node\r\n            this.tail = node;\r\n            this.count++;\r\n            return node;\r\n        }\r\n        LinkList.prototype.remove = function (node)\r\n        {\r\n            if (!(node instanceof LinkList.Node))\r\n            {\r\n                for (var p = this.head ; p != null; p = p.next)\r\n                {\r\n                    if (p.object == node)\r\n                        node = p;\r\n                }\r\n            }\r\n            if (node.parent != this)\r\n            {\r\n                throw new Error(\"The node doesn\'t belong to this link list\");\r\n            }\r\n            if (node.last == null)\r\n            {\r\n                this.head = node.next;\r\n            }\r\n            else\r\n                node.last.next = node.next;\r\n            if (node.next == null)\r\n            {\r\n                this.tail = node.last;\r\n            }\r\n            else\r\n                node.next.last = node.last;\r\n            this.count--;\r\n        }\r\n        LinkList.prototype.foreach = function (callback)\r\n        {\r\n            if (!callback)\r\n                throw new Error(\"A callback function is require.\");\r\n            var p = this.head;\r\n            for (var p = this.head; p; p = p.next)\r\n            {\r\n                var br = callback(p.object, p);\r\n                if (br)\r\n                    return;\r\n            }\r\n        }\r\n        LinkList.prototype.toArray = function ()\r\n        {\r\n            var ar = [];\r\n            var i = 0;\r\n            this.foreach(function (obj, node)\r\n            {\r\n                ar[i] = obj;\r\n                i++;\r\n            });\r\n            return ar;\r\n        }\r\n        if (!sar.Web.LinkList || !sar.Web.LinkList.version || sar.Web.LinkList.version < LinkList.version)\r\n        {\r\n            sar.Web.LinkList = LinkList;\r\n            window.LinkList = LinkList;\r\n        }\r\n\r\n\r\n\r\n\r\n        //-------Align\r\n        function Align() { }\r\n        Align.topLeft = function (w, h)\r\n        {\r\n            return new Point(0, 0);\r\n        }\r\n        Align.topCenter = function (w, h)\r\n        {\r\n            return new Point(w / 2, 0);\r\n        }\r\n        Align.topRight = function (w, h)\r\n        {\r\n            return new Point(w, 0);\r\n        }\r\n        Align.middleLeft = function (w, h)\r\n        {\r\n            return new Point(0, h / 2);\r\n        }\r\n        Align.center = function (w, h)\r\n        {\r\n            return new Point(w / 2, h / 2);\r\n        }\r\n        Align.middleRight = function (w, h)\r\n        {\r\n            return new Point(w, h / 2);\r\n        }\r\n        Align.bottomLeft = function (w, h)\r\n        {\r\n            return new Point(0, h);\r\n        }\r\n        Align.bottomCenter = function (w, h)\r\n        {\r\n            return new Point(w / 2, h);\r\n        }\r\n        Align.bottomRight = function (w, h)\r\n        {\r\n            return new Point(w, h);\r\n        }\r\n        window.Align = Align;\r\n\r\n        //-------Force\r\n        function Force(x, y, f)\r\n        {\r\n            this.x = 0;\r\n            this.y = 0;\r\n            if (x == undefined)\r\n                return;\r\n            if (x instanceof Vector2)\r\n            {\r\n                this.x = x.x;\r\n                this.y = x.y;\r\n            }\r\n            else if (f)\r\n            {\r\n                var l = Math.sqrt(x * x + y * y);\r\n                this.x = x * f / l;\r\n                this.y = y * f / l;\r\n            }\r\n            else\r\n            {\r\n                this.x = x;\r\n                this.y = y;\r\n            }\r\n        }\r\n        Force.prototype.copy = function ()\r\n        {\r\n            return new Force(this.x, this.y, this.f);\r\n        }\r\n        Force.prototype.toString = function ()\r\n        {\r\n            return \"(\" + this.x + \",\" + this.y + \")\";\r\n        }\r\n        Force.prototype.getValue = function ()\r\n        {\r\n            return Math.sqrt(this.x * this.x + this.y * this.y);\r\n        }\r\n        Force.prototype.toAcceleration = function (m)\r\n        {\r\n            return new Vector(this.x / m, this.y / m);\r\n        }\r\n        engine.Force = Force;\r\n        window.Force = Force;\r\n\r\n        //-------Mouse\r\n        function Mouse()\r\n        {\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this.dx = 0;\r\n            this.dy = 0;\r\n            this.left = Mouse.ButtonState.None;\r\n            this.right = Mouse.ButtonState.None;\r\n            this.wheel = Mouse.ButtonState.None;\r\n        }\r\n        Mouse.Buttons = {};\r\n        Mouse.Buttons.Left = 0;\r\n        Mouse.Buttons.Wheel = 1;\r\n        Mouse.Buttons.Right = 2;\r\n        Mouse.ButtonState = {};\r\n        Mouse.ButtonState.None = 0;\r\n        Mouse.ButtonState.Pressed = 1;\r\n        Mouse.ButtonState.Released = 2;\r\n        Mouse.ButtonState.Click = 3;\r\n        Mouse.ButtonState.DoubleClick = 4;\r\n        Mouse.ButtonState.Rolled = 8;\r\n        function MouseEventArgs()\r\n        {\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this.dx = 0;\r\n            this.dy = 0;\r\n            this.button = null;\r\n            this.buttonState = Mouse.ButtonState.None;\r\n            this.handled = false;\r\n        }\r\n        Mouse.MouseEventArgs = MouseEventArgs;\r\n        engine.Mouse = Mouse;\r\n        window.Mouse = Mouse;\r\n\r\n        function Touch(id)\r\n        {\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this.dx = 0;\r\n            this.dy = 0;\r\n            this.type = Touch.Types.None;\r\n            this.id = 0;\r\n        }\r\n        Touch.Types = {};\r\n        Touch.Types.None = 0;\r\n        Touch.Types.Start = 1;\r\n        Touch.Types.Move = 2;\r\n        Touch.Types.End = 3;\r\n        function TouchEventArgs()\r\n        {\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this.dx = 0;\r\n            this.dy = 0;\r\n            this.type = Touch.Types.None;\r\n            this.touches = null;\r\n            this.id = 0;\r\n            this.handled = false;\r\n        }\r\n        TouchEventArgs.prototype.copy = function ()\r\n        {\r\n            var args = new TouchEventArgs();\r\n            args.x = this.x;\r\n            args.y = this.y;\r\n            args.type = this.type;\r\n            args.touches = this.touches;\r\n            args.id = this.id;\r\n            args.handled = this.handled;\r\n            return args;\r\n        }\r\n        Touch.TouchEventArgs = TouchEventArgs;\r\n        engine.Touch = Touch;\r\n        window.Touch = Touch;\r\n\r\n        //-------Keyboard\r\n        function Keyboard()\r\n        {\r\n            this.keys = [];\r\n            this.keys[8] = Keyboard.KeyState.None;\r\n            this.keys[9] = Keyboard.KeyState.None;\r\n            this.keys[12] = Keyboard.KeyState.None;\r\n            this.keys[13] = Keyboard.KeyState.None;\r\n            this.keys[16] = Keyboard.KeyState.None;\r\n            this.keys[17] = Keyboard.KeyState.None;\r\n            this.keys[18] = Keyboard.KeyState.None;\r\n            this.keys[19] = Keyboard.KeyState.None;\r\n            this.keys[20] = Keyboard.KeyState.None;\r\n            this.keys[27] = Keyboard.KeyState.None;\r\n            this.keys[32] = Keyboard.KeyState.None;\r\n            this.keys[33] = Keyboard.KeyState.None;\r\n            this.keys[34] = Keyboard.KeyState.None;\r\n            this.keys[35] = Keyboard.KeyState.None;\r\n            this.keys[36] = Keyboard.KeyState.None;\r\n            this.keys[37] = Keyboard.KeyState.None;\r\n            this.keys[38] = Keyboard.KeyState.None;\r\n            this.keys[39] = Keyboard.KeyState.None;\r\n            this.keys[40] = Keyboard.KeyState.None;\r\n            this.keys[41] = Keyboard.KeyState.None;\r\n            this.keys[42] = Keyboard.KeyState.None;\r\n            this.keys[43] = Keyboard.KeyState.None;\r\n            this.keys[45] = Keyboard.KeyState.None;\r\n            this.keys[46] = Keyboard.KeyState.None;\r\n            this.keys[47] = Keyboard.KeyState.None;\r\n            this.keys[48] = Keyboard.KeyState.None;\r\n            this.keys[49] = Keyboard.KeyState.None;\r\n            this.keys[50] = Keyboard.KeyState.None;\r\n            this.keys[51] = Keyboard.KeyState.None;\r\n            this.keys[52] = Keyboard.KeyState.None;\r\n            this.keys[53] = Keyboard.KeyState.None;\r\n            this.keys[54] = Keyboard.KeyState.None;\r\n            this.keys[55] = Keyboard.KeyState.None;\r\n            this.keys[56] = Keyboard.KeyState.None;\r\n            this.keys[57] = Keyboard.KeyState.None;\r\n            this.keys[65] = Keyboard.KeyState.None;\r\n            this.keys[66] = Keyboard.KeyState.None;\r\n            this.keys[67] = Keyboard.KeyState.None;\r\n            this.keys[68] = Keyboard.KeyState.None;\r\n            this.keys[69] = Keyboard.KeyState.None;\r\n            this.keys[70] = Keyboard.KeyState.None;\r\n            this.keys[71] = Keyboard.KeyState.None;\r\n            this.keys[72] = Keyboard.KeyState.None;\r\n            this.keys[73] = Keyboard.KeyState.None;\r\n            this.keys[74] = Keyboard.KeyState.None;\r\n            this.keys[75] = Keyboard.KeyState.None;\r\n            this.keys[76] = Keyboard.KeyState.None;\r\n            this.keys[77] = Keyboard.KeyState.None;\r\n            this.keys[78] = Keyboard.KeyState.None;\r\n            this.keys[79] = Keyboard.KeyState.None;\r\n            this.keys[80] = Keyboard.KeyState.None;\r\n            this.keys[81] = Keyboard.KeyState.None;\r\n            this.keys[82] = Keyboard.KeyState.None;\r\n            this.keys[83] = Keyboard.KeyState.None;\r\n            this.keys[84] = Keyboard.KeyState.None;\r\n            this.keys[85] = Keyboard.KeyState.None;\r\n            this.keys[86] = Keyboard.KeyState.None;\r\n            this.keys[87] = Keyboard.KeyState.None;\r\n            this.keys[88] = Keyboard.KeyState.None;\r\n            this.keys[89] = Keyboard.KeyState.None;\r\n            this.keys[90] = Keyboard.KeyState.None;\r\n            this.keys[96] = Keyboard.KeyState.None;\r\n            this.keys[97] = Keyboard.KeyState.None;\r\n            this.keys[98] = Keyboard.KeyState.None;\r\n            this.keys[99] = Keyboard.KeyState.None;\r\n            this.keys[100] = Keyboard.KeyState.None;\r\n            this.keys[101] = Keyboard.KeyState.None;\r\n            this.keys[102] = Keyboard.KeyState.None;\r\n            this.keys[103] = Keyboard.KeyState.None;\r\n            this.keys[104] = Keyboard.KeyState.None;\r\n            this.keys[105] = Keyboard.KeyState.None;\r\n            this.keys[106] = Keyboard.KeyState.None;\r\n            this.keys[107] = Keyboard.KeyState.None;\r\n            this.keys[108] = Keyboard.KeyState.None;\r\n            this.keys[109] = Keyboard.KeyState.None;\r\n            this.keys[110] = Keyboard.KeyState.None;\r\n            this.keys[111] = Keyboard.KeyState.None;\r\n            this.keys[112] = Keyboard.KeyState.None;\r\n            this.keys[113] = Keyboard.KeyState.None;\r\n            this.keys[114] = Keyboard.KeyState.None;\r\n            this.keys[115] = Keyboard.KeyState.None;\r\n            this.keys[116] = Keyboard.KeyState.None;\r\n            this.keys[117] = Keyboard.KeyState.None;\r\n            this.keys[118] = Keyboard.KeyState.None;\r\n            this.keys[119] = Keyboard.KeyState.None;\r\n            this.keys[120] = Keyboard.KeyState.None;\r\n            this.keys[121] = Keyboard.KeyState.None;\r\n            this.keys[122] = Keyboard.KeyState.None;\r\n            this.keys[123] = Keyboard.KeyState.None;\r\n            this.keys[124] = Keyboard.KeyState.None;\r\n            this.keys[125] = Keyboard.KeyState.None;\r\n            this.keys[126] = Keyboard.KeyState.None;\r\n            this.keys[127] = Keyboard.KeyState.None;\r\n            this.keys[128] = Keyboard.KeyState.None;\r\n            this.keys[129] = Keyboard.KeyState.None;\r\n            this.keys[130] = Keyboard.KeyState.None;\r\n            this.keys[131] = Keyboard.KeyState.None;\r\n            this.keys[132] = Keyboard.KeyState.None;\r\n            this.keys[133] = Keyboard.KeyState.None;\r\n            this.keys[134] = Keyboard.KeyState.None;\r\n            this.keys[135] = Keyboard.KeyState.None;\r\n            this.keys[136] = Keyboard.KeyState.None;\r\n            this.keys[137] = Keyboard.KeyState.None;\r\n        }\r\n        Keyboard.Keys = (function (keys)\r\n        {\r\n            keys = {};\r\n            keys.BackSpace = 8;\r\n            keys.Tab = 9;\r\n            keys.Clear = 12;\r\n            keys.Enter = 13;\r\n            keys.Shift = 16;\r\n            keys.Control = 17;\r\n            keys.Alt = 18;\r\n            keys.Pause = 19;\r\n            keys.CapsLock = 20;\r\n            keys.Escape = 27;\r\n            keys.Space = 32;\r\n            keys.Prior = 33;\r\n            keys.Next = 34;\r\n            keys.End = 35;\r\n            keys.Home = 36;\r\n            keys.Left = 37;\r\n            keys.Up = 38;\r\n            keys.Right = 39;\r\n            keys.Down = 40;\r\n            keys.Select = 41;\r\n            keys.Print = 42;\r\n            keys.Execute = 43;\r\n            keys.Insert = 45;\r\n            keys.Delete = 46;\r\n            keys.Help = 47;\r\n            keys.Num0 = 48;\r\n            keys.Num1 = 49;\r\n            keys.Num2 = 50;\r\n            keys.Num3 = 51;\r\n            keys.Num4 = 52;\r\n            keys.Num5 = 53;\r\n            keys.Num6 = 54;\r\n            keys.Num7 = 55;\r\n            keys.Num8 = 56;\r\n            keys.Num9 = 57;\r\n            keys.A = 65;\r\n            keys.B = 66;\r\n            keys.C = 67;\r\n            keys.D = 68;\r\n            keys.E = 69;\r\n            keys.F = 70;\r\n            keys.G = 71;\r\n            keys.H = 72;\r\n            keys.I = 73;\r\n            keys.J = 74;\r\n            keys.K = 75;\r\n            keys.L = 76;\r\n            keys.M = 77;\r\n            keys.N = 78;\r\n            keys.O = 79;\r\n            keys.P = 80;\r\n            keys.Q = 81;\r\n            keys.R = 82;\r\n            keys.S = 83;\r\n            keys.T = 84;\r\n            keys.U = 85;\r\n            keys.V = 86;\r\n            keys.W = 87;\r\n            keys.X = 88;\r\n            keys.Y = 89;\r\n            keys.Z = 90;\r\n            keys.KP0 = 96;\r\n            keys.KP1 = 97;\r\n            keys.KP2 = 98;\r\n            keys.KP3 = 99;\r\n            keys.KP4 = 100;\r\n            keys.KP5 = 101;\r\n            keys.KP6 = 102;\r\n            keys.KP7 = 103;\r\n            keys.KP8 = 104;\r\n            keys.KP9 = 105;\r\n            keys.KPMultiply = 106;\r\n            keys.KPAdd = 107;\r\n            keys.KPSeparator = 108;\r\n            keys.KPSubtract = 109;\r\n            keys.KPDecimal = 110;\r\n            keys.KPDivide = 111;\r\n            keys.F1 = 112;\r\n            keys.F2 = 113;\r\n            keys.F3 = 114;\r\n            keys.F4 = 115;\r\n            keys.F5 = 116;\r\n            keys.F6 = 117;\r\n            keys.F7 = 118;\r\n            keys.F8 = 119;\r\n            keys.F9 = 120;\r\n            keys.F10 = 121;\r\n            keys.F11 = 122;\r\n            keys.F12 = 123;\r\n            keys.F13 = 124;\r\n            keys.F14 = 125;\r\n            keys.F15 = 126;\r\n            keys.F16 = 127;\r\n            keys.F17 = 128;\r\n            keys.F18 = 129;\r\n            keys.F19 = 130;\r\n            keys.F20 = 131;\r\n            keys.F21 = 132;\r\n            keys.F22 = 133;\r\n            keys.F23 = 134;\r\n            keys.F24 = 135;\r\n            keys.NumLock = 136;\r\n            keys.ScrollLock = 137;\r\n            keys.toString = function (keyCode)\r\n            {\r\n                switch (keyCode)\r\n                {\r\n                    case 8: return \"BackSpace\";\r\n                    case 9: return \"Tab\";\r\n                    case 12: return \"Clear\";\r\n                    case 13: return \"Enter\";\r\n                    case 16: return \"Shift\";\r\n                    case 17: return \"Control\";\r\n                    case 18: return \"Alt\";\r\n                    case 19: return \"Pause\";\r\n                    case 20: return \"CapsLock\";\r\n                    case 27: return \"Escape\";\r\n                    case 32: return \"Space\";\r\n                    case 33: return \"Prior\";\r\n                    case 34: return \"Next\";\r\n                    case 35: return \"End\";\r\n                    case 36: return \"Home\";\r\n                    case 37: return \"Left\";\r\n                    case 38: return \"Up\";\r\n                    case 39: return \"Right\";\r\n                    case 40: return \"Down\";\r\n                    case 41: return \"Select\";\r\n                    case 42: return \"Print\";\r\n                    case 43: return \"Execute\";\r\n                    case 45: return \"Insert\";\r\n                    case 46: return \"Delete\";\r\n                    case 47: return \"Help\";\r\n                    case 48: return \"0\";\r\n                    case 49: return \"1\";\r\n                    case 50: return \"2\";\r\n                    case 51: return \"3\";\r\n                    case 52: return \"4\";\r\n                    case 53: return \"5\";\r\n                    case 54: return \"6\";\r\n                    case 55: return \"7\";\r\n                    case 56: return \"8\";\r\n                    case 57: return \"9\";\r\n                    case 65: return \"A\";\r\n                    case 66: return \"B\";\r\n                    case 67: return \"C\";\r\n                    case 68: return \"D\";\r\n                    case 69: return \"E\";\r\n                    case 70: return \"F\";\r\n                    case 71: return \"G\";\r\n                    case 72: return \"H\";\r\n                    case 73: return \"I\";\r\n                    case 74: return \"J\";\r\n                    case 75: return \"K\";\r\n                    case 76: return \"L\";\r\n                    case 77: return \"M\";\r\n                    case 78: return \"N\";\r\n                    case 79: return \"O\";\r\n                    case 80: return \"P\";\r\n                    case 81: return \"Q\";\r\n                    case 82: return \"R\";\r\n                    case 83: return \"S\";\r\n                    case 84: return \"T\";\r\n                    case 85: return \"U\";\r\n                    case 86: return \"V\";\r\n                    case 87: return \"W\";\r\n                    case 88: return \"X\";\r\n                    case 89: return \"Y\";\r\n                    case 90: return \"Z\";\r\n                    case 96: return \"KP0\";\r\n                    case 97: return \"KP1\";\r\n                    case 98: return \"KP2\";\r\n                    case 99: return \"KP3\";\r\n                    case 100: return \"KP4\";\r\n                    case 101: return \"KP5\";\r\n                    case 102: return \"KP6\";\r\n                    case 103: return \"KP7\";\r\n                    case 104: return \"KP8\";\r\n                    case 105: return \"KP9\";\r\n                    case 106: return \"KPMultiply\";\r\n                    case 107: return \"KPAdd\";\r\n                    case 108: return \"KPSeparator\";\r\n                    case 109: return \"KPSubtract\";\r\n                    case 110: return \"KPDecimal\";\r\n                    case 111: return \"KPDivide\";\r\n                    case 112: return \"F1\";\r\n                    case 113: return \"F2\";\r\n                    case 114: return \"F3\";\r\n                    case 115: return \"F4\";\r\n                    case 116: return \"F5\";\r\n                    case 117: return \"F6\";\r\n                    case 118: return \"F7\";\r\n                    case 119: return \"F8\";\r\n                    case 120: return \"F9\";\r\n                    case 121: return \"F10\";\r\n                    case 122: return \"F11\";\r\n                    case 123: return \"F12\";\r\n                    case 124: return \"F13\";\r\n                    case 125: return \"F14\";\r\n                    case 126: return \"F15\";\r\n                    case 127: return \"F16\";\r\n                    case 128: return \"F17\";\r\n                    case 129: return \"F18\";\r\n                    case 130: return \"F19\";\r\n                    case 131: return \"F20\";\r\n                    case 132: return \"F21\";\r\n                    case 133: return \"F22\";\r\n                    case 134: return \"F23\";\r\n                    case 135: return \"F24\";\r\n                    case 136: return \"NumLock\";\r\n                    case 137: return \"ScrollLock\";\r\n                    default: return \"Unknown\";\r\n                }\r\n            }\r\n            return keys;\r\n        })(Keyboard.Keys);\r\n        Keyboard.KeyState = {};\r\n        Keyboard.KeyState.None = 0;\r\n        Keyboard.KeyState.Down = 1;\r\n        Keyboard.KeyState.Up = 2;\r\n        Keyboard.KeyState.Pressed = 3;\r\n        function KeyEventArgs()\r\n        {\r\n            this.key = 0;\r\n            this.keyName = \"Unknown\";\r\n            this.keyState = Keyboard.KeyState.None;\r\n            this.ctrl = false;\r\n            this.alt = false;\r\n            this.shift = false;\r\n            this.handled = false;\r\n        }\r\n        Keyboard.KeyEventArgs = KeyEventArgs;\r\n        engine.Keyboard = Keyboard;\r\n        window.Keyboard = Keyboard;\r\n\r\n        function Device()\r\n        {\r\n            this.mouse = new Mouse;\r\n            this.keyboard = new Keyboard;\r\n            this.touches = [];\r\n            this.touches.add = function (touch)\r\n            {\r\n                this[this.length] = touch;\r\n            }\r\n            this.touches.id = function (id)\r\n            {\r\n                for (var i = 0; i < this.length; i++)\r\n                {\r\n                    if (this[i].id == id)\r\n                        return this[i];\r\n                }\r\n                throw new Error(\"Id not available.\");\r\n            }\r\n            this.touches.removeId = function (id)\r\n            {\r\n                for (var i = 0; i < this.length; i++)\r\n                {\r\n                    if (this[i].id == id)\r\n                    {\r\n                        for (var j = i + 1; j < this.length; j++)\r\n                        {\r\n                            this[j - 1] = this[j];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.touches.remove = function (index)\r\n            {\r\n                for (var j = index + 1; j < this.length; j++)\r\n                {\r\n                    this[j - 1] = this[j];\r\n                }\r\n            }\r\n        }\r\n\r\n        function int(x)\r\n        {\r\n            return parseInt(x);\r\n        }\r\n\r\n        function keyCodeToKey(keyCode)\r\n        {\r\n\r\n        }\r\n\r\n        //-------Game\r\n        function Game()\r\n        {\r\n            this.fps = 0;\r\n            this.scene = null;\r\n            this.animationFrameId = null;\r\n            this.started = false;\r\n            this.onStart = null;\r\n            this.onUpdate = null;\r\n            this.onPause = null;\r\n            this.onResume = null;\r\n            this.onEnd = null;\r\n            this.graphics = null;\r\n            this.eventSource = null;\r\n        }\r\n        Game.createByCanvas = function (canvas)\r\n        {\r\n            var game = new Game();\r\n            game.graphics = new Graphics(canvas);\r\n            game.eventSource = canvas;\r\n            game.scene = new Scene();\r\n            game.setScene(game.scene);\r\n            var camera = new Camera(0, 0, 0, 0, 1);\r\n            camera.graphics = game.graphics;\r\n            game.scene.camera = camera;\r\n            return game;\r\n        }\r\n        Game.prototype.setScene = function (scene)\r\n        {\r\n            this.scene = scene;\r\n            this.scene.eventSource = this.eventSource;\r\n            scene.initEvents();\r\n            scene.game = this;\r\n        }\r\n        Game.prototype.start = function ()\r\n        {\r\n            var error = null;\r\n            var game = this;\r\n            var lastDelay = 0;\r\n            var firstFrame = true;\r\n            function animationFrame(delay)\r\n            {\r\n                try{\r\n                if (!game.started)\r\n                {\r\n                    if (game.onEnd)\r\n                        game.onEnd();\r\n                    return;\r\n                }\r\n                var x = delay;\r\n                delay = delay - lastDelay;\r\n                //delay = 30;\r\n                lastDelay = x;\r\n                if (firstFrame)\r\n                {\r\n                    firstFrame = false;\r\n                    game.animationFrameId = requestAnimationFrame(animationFrame);\r\n                    return;\r\n                }\r\n                if (engine.debug.clear)\r\n                    engine.debug.clear();\r\n                game.fps = int(1000 / delay);\r\n                engine.debug.writeLine(\"fps=\" + game.fps);\r\n                if (game.onUpdate)\r\n                    game.onUpdate(delay, this);\r\n                game.scene.updateFrame(delay);\r\n                }\r\n                catch(ex)\r\n                {\r\n                    error=ex;\r\n                }\r\n                game.animationFrameId = requestAnimationFrame(animationFrame);\r\n                if (error && engine.onError)\r\n                    engine.onError(ex.message);\r\n                else if (error)\r\n                    throw error;\r\n\r\n            }\r\n            if (!this.scene)\r\n                return false;\r\n            this.animationFrameId = requestAnimationFrame(animationFrame);\r\n            this.started = true;\r\n        }\r\n        Game.prototype.end = function ()\r\n        {\r\n            this.started = false;\r\n        }\r\n        engine.Game = Game;\r\n        window.Game = Game;\r\n\r\n        //-------Scene\r\n        function Scene()\r\n        {\r\n            this.game = null;\r\n            this.objectList = new LinkList();\r\n            this._objList = new Array();\r\n            this._objList.n = 0;\r\n            this.physics = new Scene.Physics();\r\n            this.camera = null;\r\n            this.GUI = null;\r\n            this.device = new Device();\r\n            this.doubleClickDelay = 200;\r\n            this.eventSource = null;\r\n            this.onMouseMove = null;\r\n            this.onMouseOver = null;\r\n            this.onMouseOut = null;\r\n            this.onMouseDown = null;\r\n            this.onMouseUp = null;\r\n            this.onClick = null;\r\n            this.onDoubleClick = null;\r\n            this.onKeyDown = null;\r\n            this.onKeyUp = null;\r\n            this.onKeyPress = null;\r\n            this.onTouchStart = null;\r\n            this.onTouchMove = null;\r\n            this.onTouchEnd = null;\r\n            this._objList.add = function (node)\r\n            {\r\n                this[this.n] = node;\r\n                return this.n++;\r\n            }\r\n        }\r\n        Scene.Physics = function ()\r\n        {\r\n            this.g = new Vector2(0, 0);\r\n            this.f = 0;\r\n        }\r\n        Scene.Physics.prototype.copy = function ()\r\n        {\r\n            var phy = new Scene.Physics();\r\n            phy.g = this.g.copy();\r\n            phy.f = this.f;\r\n            return phy;\r\n        }\r\n        Scene.Physics.prototype.reset = function ()\r\n        {\r\n            return;\r\n        }\r\n        Scene.prototype.reset = function ()\r\n        {\r\n            this.camera = null;\r\n            this.objectList = new LinkList();\r\n            this._objList = new Array();\r\n            this._objList.n = 0;\r\n            if (this.physics)\r\n                this.physics.reset();\r\n            this._objList.add = function (node)\r\n            {\r\n                this[this.n] = node;\r\n                return this.n++;\r\n            }\r\n        }\r\n        Scene.prototype.physicalSimulate = function (dt)\r\n        {\r\n            var scene = this;\r\n            this.objectList.foreach(function (obj, node)\r\n            {\r\n\r\n                obj.a.x = (obj.F.x + obj.constantForce.x) / obj.mass;\r\n                obj.a.y = (obj.F.y + obj.constantForce.y) / obj.mass;\r\n                if (obj.gravity && (!obj.collider || !obj.collider.landed))\r\n                {\r\n                    obj.a.x += scene.physics.g.x;\r\n                    obj.a.y += scene.physics.g.y;\r\n                }\r\n                obj.moveTo(obj.position.x + obj.v.x * dt + 0.5 * obj.a.x * dt * dt, obj.position.y + obj.v.y * dt + 0.5 * obj.a.y * dt * dt);\r\n                obj.v.x += obj.a.x * dt;\r\n                obj.v.y += obj.a.y * dt;\r\n                obj.resetForce();\r\n                if (obj.collider)\r\n                    obj.collider.landed = false;\r\n            });\r\n            this.objectList.foreach(function (obj, node)\r\n            {\r\n                //try{\r\n                if (obj.collider && obj.collider.rigidBody)\r\n                {\r\n                    for (p = node.next; p; p = p.next)\r\n                    {\r\n                        var target = p.object;\r\n                        if (target.collider && target.collider.rigidBody)\r\n                        {\r\n                            if (obj.collider.isCollideWith(target.collider))\r\n                            {\r\n                                obj.collider.collide(obj, target, dt);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                //}catch(ex){ alert(\"collide:\"+ex.message);}\r\n            });\r\n        }\r\n        Scene.prototype.render = function (dt)\r\n        {\r\n            var scene = this;\r\n            if (!this.game.graphics)\r\n                throw new Error(\"Game cannot render on a null\");\r\n            if (!this.camera)\r\n                return;\r\n            scene.camera.clear();\r\n            //scene.camera.graphics.clearRect(scene.camera.center.x - scene.camera.width / 2, scene.camera.center.y + scene.camera.height / 2, scene.camera.width, scene.camera.height);\r\n            this.objectList.foreach(function (obj, node)\r\n            {\r\n                //alert(obj.graphic.r);\r\n                if (obj.onRender)\r\n                    obj.onRender(obj, dt);\r\n                obj.render(scene.camera.graphics, obj.position.x, obj.position.y, 0, dt);\r\n                //obj.drawToCanvas(scene.game.graphics.canvas, obj.position.x, obj.position.y, 0, dt);\r\n            });\r\n            if (!scene.GUI)\r\n                return;\r\n            scene.camera.resetTransform();\r\n            scene.GUI.render(scene.camera.graphics);\r\n        }\r\n        Scene.prototype.updateFrame = function (delay)\r\n        {\r\n            var scene = this;\r\n            var dt = delay / 1000;\r\n            //dt=0.016;\r\n            this.objectList.foreach(function (obj, node)\r\n            {\r\n                if (obj.deleted)\r\n                    return;\r\n                if (obj.onUpdate)\r\n                    obj.onUpdate(obj, dt);\r\n            });\r\n            //this.render(dt);\r\n            this.physicalSimulate(dt);\r\n            this.render(dt);\r\n        }\r\n        Scene.prototype.initEvents = function ()\r\n        {\r\n            var scene = this;\r\n            var pressedKeyList = [];\r\n            var touchArray = [];\r\n            var touchArrayGUI = [];\r\n            var touchList = new LinkList();\r\n            var touchListGUI = new LinkList();\r\n            var clickTime = 0;\r\n            this.eventSource.addEventListener(\"mousemove\", function (e)\r\n            {\r\n                var mapTo = scene.camera.map(e.pageX, e.pageY);\r\n                scene.device.mouse.dx = mapTo.x - scene.device.mouse.x;\r\n                scene.device.mouse.dy = mapTo.y - scene.device.mouse.y;\r\n                scene.device.mouse.x = mapTo.x;\r\n                scene.device.mouse.y = mapTo.y;\r\n\r\n\r\n                var args = new MouseEventArgs();\r\n                args.button = e.button;\r\n                args.buttonState = Mouse.ButtonState.None;\r\n                args.handled = false;\r\n                args.x = e.pageX;\r\n                args.y = e.pageY;\r\n                if (scene.GUI)\r\n                    scene.GUI.mouseMoveCallback(e);\r\n                if (args.handled)\r\n                    return;\r\n\r\n                /*args.x = (e.pageX / scene.camera.zoom) + (scene.camera.center.x - scene.camera.width / 2);\r\n                args.y = (scene.camera.height - e.pageY / scene.camera.zoom) + (scene.camera.center.y - scene.camera.height / 2);*/\r\n                args.x = mapTo.x;\r\n                args.y = mapTo.y;\r\n\r\n                if (scene.onMouseMove)\r\n                    scene.onMouseMove(args);\r\n            });\r\n            this.eventSource.addEventListener(\"mouseover\", function (e)\r\n            {\r\n                var args = new MouseEventArgs();\r\n                args.x = scene.camera.map(e.pageX, e.pageY).x;\r\n                args.y = scene.camera.map(e.pageX, e.pageY).y;\r\n                args.button = e.button;\r\n                args.buttonState = Mouse.ButtonState.None;\r\n                args.handled = false;\r\n                if (scene.onMouseOver)\r\n                    scene.onMouseOver(args);\r\n            });\r\n            this.eventSource.addEventListener(\"mouseout\", function (e)\r\n            {\r\n                var args = new MouseEventArgs();\r\n                args.x = scene.camera.map(e.pageX, e.pageY).x;\r\n                args.y = scene.camera.map(e.pageX, e.pageY).y;\r\n                args.button = e.button;\r\n                args.buttonState = Mouse.ButtonState.None;\r\n                args.handled = false;\r\n                if (scene.onMouseOut)\r\n                    scene.onMouseOut(args);\r\n            });\r\n            this.eventSource.addEventListener(\"mousedown\", function (e)\r\n            {\r\n                var mapTo = scene.camera.map(e.pageX, e.pageY);\r\n                scene.device.mouse.dx = mapTo.x - scene.device.mouse.x;\r\n                scene.device.mouse.dy = mapTo.y - scene.device.mouse.y;\r\n                scene.device.mouse.x = mapTo.x;\r\n                scene.device.mouse.y = mapTo.y;\r\n                if (e.button == Mouse.Buttons.Left)\r\n                {\r\n                    scene.device.mouse.left = Mouse.ButtonState.Pressed;\r\n                }\r\n                else if (e.button == Mouse.Buttons.Wheel)\r\n                {\r\n                    scene.device.mouse.wheel = Mouse.ButtonState.Pressed;\r\n                }\r\n                else if (e.button == Mouse.Buttons.Right)\r\n                {\r\n                    scene.device.mouse.right = Mouse.ButtonState.Pressed;\r\n                }\r\n\r\n                var args = new MouseEventArgs();\r\n                args.button = e.button;\r\n                args.buttonState = Mouse.ButtonState.Pressed;\r\n                args.handled = false;\r\n                args.x = e.pageX;\r\n                args.y = e.pageY;\r\n                if (scene.GUI)\r\n                    scene.GUI.mouseDownCallback(args);\r\n                if (args.handled)\r\n                    return;\r\n\r\n                args.x = mapTo.x;\r\n                args.y = mapTo.y;\r\n                scene.objectList.foreach(function (obj, node)\r\n                {\r\n                    if (obj.hitTest && obj.onMouseDown && obj.collider)\r\n                    {\r\n                        var p = new Point(args.x, args.y);\r\n                        if (obj.collider.isCollideWith(p))\r\n                        {\r\n                            obj.onMouseDown(args);\r\n                            if (args.handled)\r\n                                return true;\r\n                        }\r\n                    }\r\n                });\r\n                if (args.handled)\r\n                    return;\r\n                if (scene.onMouseDown)\r\n                    scene.onMouseDown(args);\r\n            });\r\n            this.eventSource.addEventListener(\"mouseup\", function (e)\r\n            {\r\n                var mapTo = scene.camera.map(e.pageX, e.pageY);\r\n                scene.device.mouse.dx = mapTo.x - scene.device.mouse.x;\r\n                scene.device.mouse.dy = mapTo.y - scene.device.mouse.y;\r\n                scene.device.mouse.x = mapTo.x;\r\n                scene.device.mouse.y = mapTo.y;\r\n                if (e.button == Mouse.Buttons.Left)\r\n                {\r\n                    scene.device.mouse.left = Mouse.ButtonState.Released;\r\n                }\r\n                else if (e.button == Mouse.Buttons.Wheel)\r\n                {\r\n                    scene.device.mouse.wheel = Mouse.ButtonState.Released;\r\n                }\r\n                else if (e.button == Mouse.Buttons.Right)\r\n                {\r\n                    scene.device.mouse.right = Mouse.ButtonState.Released;\r\n                }\r\n\r\n                var args = new MouseEventArgs();\r\n                args.button = e.button;\r\n                args.buttonState = Mouse.ButtonState.Released;\r\n                args.handled = false;\r\n                args.x = e.pageX;\r\n                args.y = e.pageY;\r\n                if (scene.GUI)\r\n                    scene.GUI.mouseUpCallback(args);\r\n                if (args.handled)\r\n                    return;\r\n\r\n                args.x = mapTo.x;\r\n                args.y = mapTo.y;\r\n\r\n                scene.objectList.foreach(function (obj, node)\r\n                {\r\n                    if (obj.hitTest && obj.onMouseUp && obj.collider)\r\n                    {\r\n                        var p = new Point(args.x, args.y);\r\n                        if (obj.collider.isCollideWith(p))\r\n                        {\r\n                            obj.onMouseUp(args);\r\n                            if (args.handled)\r\n                                return true;\r\n                        }\r\n                    }\r\n                });\r\n                if (args.handled)\r\n                    return;\r\n                if (scene.onMouseUp)\r\n                    scene.onMouseUp(args);\r\n            });\r\n            this.eventSource.addEventListener(\"click\", function (e)\r\n            {\r\n                var args = new MouseEventArgs();\r\n                args.button = e.button;\r\n                args.buttonState = Mouse.ButtonState.Click;\r\n                args.handled = false;\r\n\r\n                var t = (new Date()).getTime();\r\n                if (t - clickTime <= scene.doubleClickDelay)\r\n                {\r\n                    args.buttonState = Mouse.ButtonState.DoubleClick; args.x = e.pageX;\r\n                    args.y = e.pageY;\r\n                    if (scene.GUI)\r\n                        scene.GUI.doubleClickCallback(args);\r\n                    if (args.handled)\r\n                        return;\r\n\r\n                    args.x = scene.camera.map(e.pageX, e.pageY).x;\r\n                    args.y = scene.camera.map(e.pageX, e.pageY).y;\r\n\r\n                    clickTime = 0;\r\n                    scene.objectList.foreach(function (obj, node)\r\n                    {\r\n                        if (obj.hitTest && obj.onDoubleClick && obj.collider)\r\n                        {\r\n                            var p = new Point(args.x, args.y);\r\n                            if (obj.collider.isCollideWith(p))\r\n                            {\r\n                                obj.onDoubleClick(args)\r\n                                if (args.handled)\r\n                                    return true;\r\n                            }\r\n                        }\r\n                    });\r\n                    if (args.handled)\r\n                        return;\r\n                    if (scene.onDoubleClick)\r\n                        scene.onDoubleClick(args);\r\n                }\r\n                else\r\n                {\r\n                    args.x = e.pageX;\r\n                    args.y = e.pageY;\r\n                    if (scene.GUI)\r\n                        scene.GUI.clickCallback(args);\r\n                    if (args.handled)\r\n                        return;\r\n\r\n                    args.x = scene.camera.map(e.pageX, e.pageY).x;\r\n                    args.y = scene.camera.map(e.pageX, e.pageY).y;\r\n\r\n                    clickTime = t;\r\n                    scene.objectList.foreach(function (obj, node)\r\n                    {\r\n                        if (obj.hitTest && obj.onClick && obj.collider)\r\n                        {\r\n                            var p = new Point(args.x, args.y);\r\n                            if (obj.collider.isCollideWith(p))\r\n                            {\r\n                                obj.onClick(args);\r\n                                if (args.handled)\r\n                                    return true;\r\n                            }\r\n                        }\r\n                    });\r\n                    if (args.handled)\r\n                        return;\r\n\r\n                    if (scene.onClick)\r\n                        scene.onClick(args);\r\n                }\r\n            });\r\n            window.addEventListener(\"keydown\", function (e)\r\n            {\r\n                scene.device.keyboard.keys[e.keyCode] = Keyboard.KeyState.Down;\r\n\r\n                if (!pressedKeyList[e.keyCode])\r\n                {\r\n                    pressedKeyList[e.keyCode] = true;\r\n                    var args = new KeyEventArgs();\r\n                    args.key = e.keyCode;\r\n                    args.keyName = Keyboard.Keys.toString(args.key);\r\n                    args.keyState = Keyboard.KeyState.Down;\r\n                    args.ctrl = e.ctrlKey;\r\n                    args.alt = e.altKey;\r\n                    args.shift = e.shiftKey;\r\n                    args.handled = false;\r\n                    e.key = keyCodeToKey(e.keyCode);\r\n                    if (scene.onKeyDown)\r\n                        scene.onKeyDown(args);\r\n                }\r\n            });\r\n            window.addEventListener(\"keyup\", function (e)\r\n            {\r\n                scene.device.keyboard.keys[e.keyCode] = Keyboard.KeyState.Up;\r\n\r\n                if (pressedKeyList[e.key.toUpperCase()])\r\n                {\r\n                    pressedKeyList[e.key.toUpperCase()] = false;\r\n                    var args = new KeyEventArgs();\r\n                    args.key = e.keyCode;\r\n                    args.keyName = Keyboard.Keys.toString(args.key);\r\n                    args.keyState = Keyboard.KeyState.Up;\r\n                    args.ctrl = e.ctrlKey;\r\n                    args.alt = e.altKey;\r\n                    args.shift = e.shiftKey;\r\n                    args.handled = false;\r\n                    if (scene.onKeyUp)\r\n                        scene.onKeyUp(args);\r\n                }\r\n            });\r\n            window.addEventListener(\"keypress\", function (e)\r\n            {\r\n                var args = new KeyEventArgs();\r\n                args.key = e.keyCode;\r\n                args.keyName = Keyboard.Keys.toString(args.key);\r\n                args.keyState = Keyboard.KeyState.Pressed;\r\n                args.ctrl = e.ctrlKey;\r\n                args.alt = e.altKey;\r\n                args.shift = e.shiftKey;\r\n                args.handled = false;\r\n                if (scene.onKeyPress)\r\n                    scene.onKeyPress(args);\r\n            });\r\n            this.eventSource.addEventListener(\"touchstart\", function (e)\r\n            {\r\n                for (var i = 0; i < e.changedTouches.length ; i++)\r\n                {\r\n                    var t = new Touch(e.changedTouches[i].identifier);\r\n                    t.x = scene.camera.map(e.changedTouches[i].pageX, e.changedTouches[i].pageY).x;\r\n                    t.y = scene.camera.map(e.changedTouches[i].pageX, e.changedTouches[i].pageY).y;\r\n                    t.type = Touch.Types.Start;\r\n                    scene.device.touches.add(t);\r\n\r\n                    var argsGUI = new Touch.TouchEventArgs();\r\n                    argsGUI.type = Touch.Types.Start;\r\n                    argsGUI.id = e.changedTouches[i].identifier;\r\n                    argsGUI.x = e.changedTouches[i].pageX;\r\n                    argsGUI.y = e.changedTouches[i].pageY;\r\n                    touchListGUI.add(argsGUI);\r\n                    touchArrayGUI[argsGUI.id] = argsGUI;\r\n                    argsGUI.touches = touchListGUI.toArray();\r\n\r\n                    var args = argsGUI.copy();\r\n                    args.x = scene.camera.map(e.changedTouches[i].pageX, e.changedTouches[i].pageY).x;\r\n                    args.y = scene.camera.map(e.changedTouches[i].pageX, e.changedTouches[i].pageY).y;\r\n                    touchList.add(args);\r\n                    touchArray[args.id] = args;\r\n                    args.touches = touchList.toArray();\r\n\r\n                    if (scene.GUI)\r\n                        scene.GUI.touchStartCallback(argsGUI);\r\n                    if (argsGUI.handled)\r\n                        continue;\r\n                    if (scene.onTouchStart)\r\n                        scene.onTouchStart(args);\r\n                }\r\n            });\r\n            this.eventSource.addEventListener(\"touchmove\", function (e)\r\n            {\r\n                for (var i = 0; i < e.changedTouches.length ; i++)\r\n                {\r\n                    var mapTo = scene.camera.map(e.pageX, e.pageY);\r\n                    var id = e.changedTouches[i].identifier;\r\n                    var t = scene.device.touches.id(id);\r\n                    t.dx = mapTo.x - scene.device.mouse.x;\r\n                    t.dy = mapTo.y - scene.device.mouse.y;\r\n                    t.x = mapTo.x;\r\n                    t.y = mapTo.y;\r\n                    t.type = Touch.Types.Move;\r\n\r\n                    if (!touchArray[id] || !touchArrayGUI[id])\r\n                        continue;\r\n\r\n                    var argsGUI = touchArrayGUI[id];\r\n                    argsGUI.type = Touch.Types.Move;\r\n                    argsGUI.touches = touchListGUI.toArray();\r\n                    argsGUI.x = e.changedTouches[i].pageX;\r\n                    argsGUI.y = e.changedTouches[i].pageY;\r\n\r\n                    var args = touchArray[id];\r\n                    args.type = Touch.Types.Move;\r\n                    args.x = scene.camera.map(e.changedTouches[i].pageX, e.changedTouches[i].pageY).x;\r\n                    args.y = scene.camera.map(e.changedTouches[i].pageX, e.changedTouches[i].pageY).y;\r\n                    args.touches = touchList.toArray();\r\n\r\n                    if (scene.GUI)\r\n                        scene.GUI.touchMoveCallback(argsGUI);\r\n                    if (argsGUI.handled)\r\n                        continue;\r\n\r\n                    if (scene.onTouchMove)\r\n                        scene.onTouchMove(args);\r\n                }\r\n            });\r\n            this.eventSource.addEventListener(\"touchend\", function (e)\r\n            {\r\n                try\r\n                {\r\n\r\n                    for (var i = 0; i < e.changedTouches.length ; i++)\r\n                    {\r\n                        var id = e.changedTouches[i].identifier;\r\n                        scene.device.touches.removeId(id);\r\n\r\n                        if (!touchArray[id] || !touchArrayGUI[id])\r\n                            continue;\r\n\r\n                        var argsGUI = touchArrayGUI[id];\r\n                        touchArrayGUI[id] = null;\r\n                        touchListGUI.remove(argsGUI);\r\n                        argsGUI.type = Touch.Types.End;\r\n                        argsGUI.id = e.changedTouches[i].identifier;\r\n                        argsGUI.touches = touchListGUI.toArray();\r\n                        argsGUI.x = e.changedTouches[i].pageX;\r\n                        argsGUI.y = e.changedTouches[i].pageY;\r\n\r\n                        var args = touchArray[id];\r\n                        args.type = Touch.Types.End;\r\n                        args.touches = touchList.toArray();\r\n                        args.x = scene.camera.map(e.changedTouches[i].pageX, e.changedTouches[i].pageY).x;\r\n                        args.y = scene.camera.map(e.changedTouches[i].pageX, e.changedTouches[i].pageY).y;\r\n\r\n                        if (scene.GUI)\r\n                            scene.GUI.touchEndCallback(argsGUI);\r\n                        if (args.handled)\r\n                            continue;\r\n                        if (scene.onTouchEnd)\r\n                            scene.onTouchEnd(args);\r\n                    }\r\n                }\r\n                catch (ex)\r\n                {\r\n                    alert(ex.message);\r\n                }\r\n            });\r\n        }\r\n        Scene.prototype.addGameObject = function (obj)\r\n        {\r\n            var node = this.objectList.add(obj);\r\n            obj.id = this._objList.add(node);\r\n            return obj.id;\r\n        }\r\n        Scene.prototype.removeGameObject = function (id)\r\n        {\r\n            var node = this._objList[id];\r\n            node.object.deleted = true;\r\n            if (!node)\r\n                throw new Error(\"The object has been removed.\");\r\n            this.objectList.remove(node);\r\n            this._objList[id] = null;\r\n        }\r\n        engine.Scene = Scene;\r\n        window.Scene = Scene;\r\n\r\n        function Camera(x, y, w, h, z)\r\n        {\r\n            this.center = new Point(x, y);\r\n            this.position = new Point(x, y);\r\n            this.width = w;\r\n            this.height = h;\r\n            this.zoom = z;\r\n            this.rotate = 0;\r\n            this.graphics = null;\r\n        }\r\n        Camera.prototype.copy = function ()\r\n        {\r\n            var c = new Camera(this.x, this.y, this.width, this.height, this.zoom);\r\n            c.graphics = this.graphics;\r\n            return c;\r\n        }\r\n        Camera.prototype.setCenter = function (x, y, align)\r\n        {\r\n            if (!align)\r\n                throw new Error(\"Align function is required!\");\r\n            this.position.x = x;\r\n            this.position.y = y;\r\n            this.center.x = x + this.width / 2 - align(this.width, this.height).x;\r\n            this.center.y = y + this.height / 2 - align(this.width, this.height).y;\r\n        }\r\n        Camera.prototype.moveTo = function (x, y)\r\n        {\r\n            this.center.x += (x - this.position.x);\r\n            this.center.y += (y - this.position.y);\r\n            this.position.x = x;\r\n            this.position.y = y;\r\n            if (!this.graphics || !this.graphics.ctx)\r\n                return;\r\n            //this.resetTransform();\r\n        }\r\n        Camera.prototype.zoomTo = function (z)\r\n        {\r\n            this.zoom = z;\r\n            if (!this.graphics || !this.graphics.ctx)\r\n                return;\r\n            //this.resetTransform();\r\n        }\r\n        Camera.prototype.rotateTo = function (angle)\r\n        {\r\n            throw new Error(\"Coming soon...\");\r\n            this.rotate = angle;\r\n            if (!this.graphics || !this.graphics.ctx)\r\n                return;\r\n            //this.resetTransform();\r\n        }\r\n        Camera.prototype.resetTransform = function ()\r\n        {\r\n            //alert(this.graphics);\r\n            this.graphics.setTransform(1, 0, 0, 1, 0, 0);\r\n        }\r\n        Camera.prototype.clear = function ()\r\n        {\r\n            if (!this.graphics || !this.graphics.ctx)\r\n                return;\r\n            this.resetTransform();\r\n            this.graphics.ctx.clearRect(0, 0, this.graphics.canvas.width, this.graphics.canvas.height);\r\n            this.applyTransform();\r\n        }\r\n        Camera.prototype.applyTransform = function ()\r\n        {\r\n            if (!this.graphics || !this.graphics.ctx)\r\n                return;\r\n            var sinA = Math.sin(this.rotate);\r\n            var cosA = Math.cos(this.rotate);\r\n            this.width = this.graphics.canvas.width;\r\n            this.height = this.graphics.canvas.height;\r\n            var x0 = -this.position.x + this.width / 2;\r\n            var y0 = this.position.y + this.height / 2;\r\n            this.width = this.graphics.canvas.width / this.zoom;\r\n            this.height = this.graphics.canvas.height / this.zoom;\r\n            var x1 = this.center.x * cosA + this.center.y * sinA - this.center.x;\r\n            var y1 = -this.center.x * sinA + this.center.y * cosA - this.center.y;\r\n            var x2 = (1 - 1 / this.zoom) * this.center.x * this.zoom;\r\n            var y2 = (1 - 1 / this.zoom) * this.center.y * this.zoom;\r\n            this.graphics.setTransform(1, 0, 0, 1, x0, y0);\r\n            //this.graphics.setTransform(1, 0, 0, 1, 100, 100);\r\n            this.graphics.transform(cosA, sinA, -sinA, cosA, 0, 0);\r\n            this.graphics.transform(1, 0, 0, 1, x1, -y1);\r\n            this.graphics.transform(this.zoom, 0, 0, this.zoom, -x2, +y2);\r\n            //this.graphics.clearRect(this.center.x - this.width / 2, this.center.y - this.height / 2);\r\n        }\r\n        Camera.prototype.map = function (x, y)\r\n        {\r\n            return new Point((x / this.zoom) + (this.center.x - this.width / 2), (this.height - y / this.zoom) + (this.center.y - this.height / 2));\r\n        }\r\n        engine.Camera = Camera;\r\n        window.Camera = Camera;\r\n\r\n        function GUI()\r\n        {\r\n\r\n        }\r\n        function Button(context)\r\n        {\r\n        }\r\n        function TextBlock(text)\r\n        {\r\n        }\r\n        function Joystick()\r\n        {\r\n        }\r\n\r\n\r\n        //-------Graphics\r\n        function Graphics(canvas)\r\n        {\r\n            if (!canvas)\r\n                throw new Error(\"paramter error.\");\r\n            if (!canvas.getContext)\r\n                throw new Error(\"paramter 1 must be a canvas\");\r\n            this.canvas = canvas;\r\n            this.ctx = canvas.getContext(\"2d\");\r\n            this.o = new Point(0, 0);\r\n            this.zoom = 0;\r\n            this.rotation = 0;\r\n            this.fillStyle = \"#000000\";\r\n            this.strokeStyle = \"#000000\";\r\n            this.shadowColor = \"#000000\";\r\n            this.shadowBlur = \"#000000\";\r\n            this.shadowOffsetX = 0;\r\n            this.shadowOffsetY = 0;\r\n            this.lineCap = \"butt\";\r\n            this.lineJoin = \"miter\";\r\n            this.lineWidth = 1;\r\n            this.miterLimit = 10;\r\n            this.font = new Font(\"sans-serif\", \"10px\");\r\n            this.textAlign = TextAlign.Start;\r\n            this.textBaseline = TextBaseline.Alphabetic;\r\n            this.globalAlpha = 1.0;\r\n            var globalCompositeOperation = \"source-over\";\r\n            var graphics = this;\r\n            Object.defineProperty(this, \"globalCompositeOperation\", {\r\n                get: function ()\r\n                {\r\n                    return globalCompositeOperation;\r\n                },\r\n                set: function (value)\r\n                {\r\n                    globalCompositeOperation = value;\r\n                    graphics.ctx.globalCompositeOperation = value;\r\n                }\r\n            });\r\n        }\r\n        Graphics.LineCap = (function () { var lineCap = {}; lineCap.Butt = \"butt\"; lineCap.Round = \"round\"; lineCap.Square = \"square\"; return lineCap; })();\r\n        Graphics.LineJoin = (function () { var lineJoin = {}; lineJoin.Bevel = \"bevel\"; lineJoin.Round = \"round\"; lineJoin.Miter = \"miter\"; return lineJoin })();\r\n        Graphics.CompositeOperation = (function () { var co = {}; co.SourceOver = \"source-over\"; co.SourceAtop = \"source-atop\"; co.SourceIn = \"source-in\"; co.SourceOut = \"source-out\"; co.DestinationOver = \"destination-over\"; co.DestinationAtop = \"destination-atop\"; co.DestinationIn = \"destination-in\"; co.DestinationOut = \"destination-out\"; co.Lighter = \"lighter\"; co.Copy = \"copy\"; co.Xor = \"xor\"; return co; })();\r\n        Graphics.drawLine = function (canvas, x1, y1, x2, y2, color)\r\n        {\r\n            if (!canvas)\r\n                throw new Error(\"paramter error.\");\r\n            if (!canvas.getContext)\r\n                throw new Error(\"paramter 1 must be a canvas\");\r\n\r\n            ctx = canvas.getContext(\"2d\");\r\n            ctx.beginPath();\r\n            ctx.moveTo(x1, y1);\r\n            ctx.lineTo(x2, y2);\r\n            if (color)\r\n                ctx.strokeStyle = color;\r\n            ctx.stroke();\r\n        }\r\n        Graphics.drawArc = function (canvas, x, y, r, ang1, ang2, clockwise, color)\r\n        {\r\n            var ctx = canvas.getContext(\"2d\");\r\n            ctx.beginPath();\r\n            ctx.arc(x, y, r, ang1, ang2, clockwise);\r\n            ctx.strokeStyle = color;\r\n            ctx.stroke();\r\n        }\r\n        Graphics.drawCircle = function (canvas, x, y, r, strokeStyle, fillStyle, strokeWidth)\r\n        {\r\n            var ctx = canvas.getContext(\"2d\");\r\n            ctx.beginPath();\r\n            ctx.arc(x, y, r, 0, Math.PI * 2);\r\n            ctx.strokeStyle = strokeStyle;\r\n            ctx.fillStyle = fillStyle;\r\n            ctx.lineWidth = strokeWidth;\r\n            ctx.fill();\r\n            ctx.stroke();\r\n        }\r\n        Graphics.drawImage = function (canvas, img, sx, sy, swidth, sheight, x, y, width, height)\r\n        {\r\n            var ctx = canvas.getContext(\"2d\");\r\n            ctx.drawImage(img, sx, sy, swidth, sheight, x, y, width, height);\r\n        }\r\n        Graphics.fillRect = function (canvas, x, y, w, h, color)\r\n        {\r\n            if (!canvas)\r\n                throw new Error(\"paramter error.\");\r\n            if (!canvas.getContext)\r\n                throw new Error(\"paramter 1 must be a canvas\");\r\n            ctx = canvas.getContext(\"2d\");\r\n            ctx.fillStyle = color ? color : \"black\";\r\n            ctx.fillRect(x, y, w, h);\r\n\r\n        }\r\n        Graphics.clear = function (canvas, color)\r\n        {\r\n            if (!canvas)\r\n                throw new Error(\"paramter error.\");\r\n            if (!canvas.getContext)\r\n                throw new Error(\"paramter 1 must be a canvas\");\r\n            var ctx = canvas.getContext(\"2d\");\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            /*/ctx.fillStyle = \'rgba(255,255,255,0.05)\';\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);*/\r\n            if (color)\r\n            {\r\n                ctx.fillStyle = color;\r\n                ctx.fillRect(0, 0, width, height);\r\n            }\r\n        }\r\n        Graphics.clearRect = function (canvas, x, y, width, height)\r\n        {\r\n            var ctx = canvas.getContext(\"2d\");\r\n            ctx.clearRect(x, y, width, height);\r\n        }\r\n        Graphics.prototype.rect = function (x, y, width, height)\r\n        {\r\n            return this.ctx.rect(x, -y, width, height);\r\n        }\r\n        Graphics.prototype.roundRect = function (x, y, width, height, r)\r\n        {\r\n            if (!this.ctx)\r\n                return;\r\n            if (width < 2 * r)\r\n                width = 2 * r;\r\n            if (height < 2 * r)\r\n                height = 2 * r;\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(x + r, -y);\r\n            this.ctx.lineTo(x + width - r, -y);\r\n            this.ctx.arcTo(x + width, -y, x + width, -y + r, r);\r\n            this.ctx.lineTo(x + width, -y + height - r);\r\n            this.ctx.arcTo(x + width, -y + height, x + width - r, -y + height, r);\r\n            this.ctx.lineTo(x + r, -y + height);\r\n            this.ctx.arcTo(x, -y + height, x, -y + height - r, r);\r\n            this.ctx.lineTo(x, -y + r);\r\n            this.ctx.arcTo(x, -y, x + r, -y, r);\r\n            this.ctx.closePath();\r\n            return;\r\n        }\r\n        Graphics.prototype.fillRect = function (x, y, width, height)\r\n        {\r\n            this.ctx.fillStyle = this.fillStyle;\r\n            return this.ctx.fillRect(x, -y, width, height);\r\n        }\r\n        Graphics.prototype.strokeRect = function (x, y, width, height)\r\n        {\r\n            this.ctx.lineCap = this.lineCap;\r\n            this.ctx.lineJoin = this.lineJoin;\r\n            this.ctx.lineWidth = this.lineWidth;\r\n            this.ctx.miterLimit = this.miterLimit;\r\n            this.ctx.strokeStyle = this.strokeStyle;\r\n            return this.ctx.strokeRect(x, -y, width, height);\r\n        }\r\n        Graphics.prototype.fillRoundRect = function (x, y, width, height, r)\r\n        {\r\n            this.roundRect(x, y, width, height, r);\r\n            this.fill();\r\n        }\r\n        Graphics.prototype.strokeRoundRect = function (x, y, width, height, r)\r\n        {\r\n            this.roundRect(x, y, width, height, r);\r\n            this.stroke();\r\n        }\r\n        Graphics.prototype.clearRect = function (x, y, width, height)\r\n        {\r\n            this.ctx.clearRect(x, -y, width, height);\r\n        }\r\n        Graphics.prototype.fill = function ()\r\n        {\r\n            this.ctx.fillStyle = this.fillStyle;\r\n            return this.ctx.fill();\r\n        }\r\n        Graphics.prototype.stroke = function ()\r\n        {\r\n            this.ctx.lineCap = this.lineCap;\r\n            this.ctx.lineJoin = this.lineJoin;\r\n            this.ctx.lineWidth = this.lineWidth;\r\n            this.ctx.miterLimit = this.miterLimit;\r\n            this.ctx.strokeStyle = this.strokeStyle;\r\n            return this.ctx.stroke();\r\n        }\r\n        Graphics.prototype.beginPath = function ()\r\n        {\r\n            return this.ctx.beginPath();\r\n        }\r\n        Graphics.prototype.moveTo = function (x, y)\r\n        {\r\n            return this.ctx.moveTo(x, -y);\r\n        }\r\n        Graphics.prototype.closePath = function ()\r\n        {\r\n            return this.ctx.closePath();\r\n        }\r\n        Graphics.prototype.lineTo = function (x, y)\r\n        {\r\n            return this.ctx.lineTo(x, -y);\r\n        }\r\n        Graphics.prototype.clip = function ()\r\n        {\r\n            return this.ctx.clip();\r\n        }\r\n        Graphics.prototype.quadraticCurveTo = function (cpx, cpy, x, y)\r\n        {\r\n            return this.ctx.quadraticCurveTo(cpx, -cpy, x, -y);\r\n        }\r\n        Graphics.prototype.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y)\r\n        {\r\n            return this.ctx.bezierCurveTo(cp1x, -cp1y, cp2x, -cp2y, x, -y);\r\n        }\r\n        Graphics.prototype.arc = function (x, y, r, sAngle, eAngle, counterclockwise)\r\n        {\r\n            return this.ctx.arc(x, -y, r, sAngle, eAngle, counterclockwise);\r\n        }\r\n        Graphics.prototype.arcTo = function (x1, y1, x2, y2, r)\r\n        {\r\n            return this.ctx.arcTo(x1, -y1, x2, -y2, r);\r\n        }\r\n        Graphics.prototype.isPointInPath = function (x, y)\r\n        {\r\n            return this.ctx.isPointInPath(x, -y);\r\n        }\r\n        Graphics.prototype.scale = function (scalewidth, scaleheight)\r\n        {\r\n            return this.ctx.scale(scalewidth, scaleheight);\r\n        }\r\n        Graphics.prototype.rotate = function (angle)\r\n        {\r\n            return this.ctx.rotate(angle);\r\n        }\r\n        Graphics.prototype.translate = function (x, y)\r\n        {\r\n            return this.ctx.translate(x, -y);\r\n        }\r\n        Graphics.prototype.transform = function (a, b, c, d, e, f)\r\n        {\r\n            return this.ctx.transform(a, b, c, d, e, f);\r\n        }\r\n        Graphics.prototype.setTransform = function (a, b, c, d, e, f)\r\n        {\r\n            return this.ctx.setTransform(a, b, c, d, e, f);\r\n        }\r\n        Graphics.prototype.fillText = function (text, x, y, maxWidth)\r\n        {\r\n            this.ctx.font = this.font.toString();\r\n            this.ctx.textAlign = this.textAlign;\r\n            this.ctx.textBaseline = this.textBaseline;\r\n            this.ctx.fillStyle = this.fillStyle;\r\n            //this.ctx.fillText(\"2333333\", 100, 100, -1);\r\n            if (maxWidth)\r\n                return this.ctx.fillText(text, x, -y, maxWidth);\r\n            else\r\n                return this.ctx.fillText(text, x, -y);\r\n        }\r\n        Graphics.prototype.strokeText = function (text, x, y, maxWidth)\r\n        {\r\n            this.ctx.font = this.font.toString();\r\n            this.ctx.fontAlign = this.fontAlign;\r\n            this.ctx.textBaseline = this.textBaseline;\r\n            this.ctx.lineCap = this.lineCap;\r\n            this.ctx.lineJoin = this.lineJoin;\r\n            this.ctx.lineWidth = this.lineWidth;\r\n            this.ctx.miterLimit = this.miterLimit;\r\n            this.ctx.strokeStyle = this.strokeStyle;\r\n            return this.ctx.strokeText(text, x, -y, maxWidth);\r\n        }\r\n        Graphics.prototype.measureText = function (text)\r\n        {\r\n            this.ctx.font = this.font.toString();\r\n            this.ctx.fontAlign = this.fontAlign;\r\n            this.ctx.textBaseline = this.textBaseline;\r\n            return this.ctx.measureText(text);\r\n        }\r\n        Graphics.prototype.drawImage = function (img, sx, sy, swidth, sheight, x, y, width, height)\r\n        {\r\n            if (isNaN(x) && !isNaN(sx))\r\n            {\r\n                return this.ctx.drawImage(img, sx, -sy, swidth, sheight);\r\n            }\r\n            else\r\n                return this.ctx.drawImage(img, sx, sy, swidth, sheight, x, -y, width, height);\r\n        }\r\n        Graphics.prototype.drawLine = function (x1, y1, x2, y2)\r\n        {\r\n            this.ctx.lineCap = this.lineCap;\r\n            this.ctx.lineJoin = this.lineJoin;\r\n            this.ctx.lineWidth = this.lineWidth;\r\n            this.ctx.miterLimit = this.miterLimit;\r\n            this.ctx.strokeStyle = this.strokeStyle;\r\n\r\n            this.beginPath();\r\n            this.moveTo(x1, y1);\r\n            this.lineTo(x2, y2);\r\n            this.stroke();\r\n        }\r\n\r\n        sar.Color = (function (color)\r\n        {\r\n            Object.defineProperty(window, \"Color\", {\r\n                get: function ()\r\n                {\r\n                    return color;\r\n                },\r\n                set: function (value)\r\n                {\r\n                    if (!color)\r\n                        color = value;\r\n                    if (!value || !value.version || value.version < color.version)\r\n                        return;\r\n                    color = value;\r\n                }\r\n            });\r\n            if (color && color.version && color.version > 1.0)\r\n                return;\r\n            //-------Color\r\n            function Color(r, g, b, a)\r\n            {\r\n                r = int(r);\r\n                g = int(g);\r\n                b = int(b);\r\n                if (isNaN(r) || r >= 256)\r\n                    r = 255;\r\n                else if (r < 0)\r\n                    r = 0;\r\n                if (isNaN(g) || g >= 256)\r\n                    g = 255;\r\n                else if (g < 0)\r\n                    g = 0;\r\n                if (isNaN(b) || b >= 256)\r\n                    b = 255;\r\n                else if (b < 0)\r\n                    b = 0;\r\n                if (isNaN(a) || a > 1.0)\r\n                    a = 1.0;\r\n                else if (a < 0)\r\n                    a = 0;\r\n                this.red = r;\r\n                this.green = g;\r\n                this.blue = b;\r\n                this.alpha = a;\r\n            }\r\n            Color.version = 1.0;\r\n            Color.random = function ()\r\n            {\r\n                return new Color(Math.random() * 255, Math.random() * 255, Math.random() * 255, 1.0);\r\n            }\r\n            Color.prototype.copy = function ()\r\n            {\r\n                return new Color(this.red, this.green, this.blue, this.alpha);\r\n            }\r\n            Color.prototype.toString = function ()\r\n            {\r\n                return \"rgba(\" + this.red.toString() + \",\" + this.green.toString() + \",\" + this.blue.toString() + \",\" + this.alpha.toString() + \")\";\r\n            }\r\n            window.Color = Color;\r\n            return Color;\r\n        })(sar.Color);\r\n\r\n        engine.Graphics = Graphics;\r\n        window.Graphics = Graphics;\r\n\r\n        //--------------GUI\r\n        function Thickness(top, bottom, left, right)\r\n        {\r\n            if (isNaN(top))\r\n            {\r\n                top = bottom = left = right = 0;\r\n            }\r\n            else if (isNaN(bottom))\r\n            {\r\n                bottom = left = right = top;\r\n            }\r\n            this.top = top;\r\n            this.bottom = bottom;\r\n            this.left = left;\r\n            this.right = right;\r\n        }\r\n        Thickness.prototype.copy = function ()\r\n        {\r\n            return new Thickness(this.top, this.bottom, this.left, this.right);\r\n        }\r\n        window.Thickness = Thickness;\r\n\r\n        var VerAlign = {};\r\n        VerAlign.Top = 1;\r\n        VerAlign.Bottom = 2;\r\n        VerAlign.Center = 0;\r\n        VerAlign.Stretch = 3;\r\n        window.VerAlign = VerAlign;\r\n\r\n        var HorAlign = {};\r\n        HorAlign.Left = 1;\r\n        HorAlign.Right = 2;\r\n        HorAlign.Center = 0;\r\n        HorAlign.Stretch = 3;\r\n        window.HorAlign = HorAlign;\r\n\r\n        function GUI()\r\n        {\r\n            this.scene = null;\r\n            this.children = new LinkList();\r\n            this.width = 0;\r\n            this.height = 0;\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this.color = new Color(0, 0, 0, 1.00);\r\n            this.bgColor = new Color(0, 0, 0, 0);\r\n\r\n            this.onRender = null;\r\n            this.onMouseDown = null;\r\n            this.onMouseUp = null;\r\n            this.onMouseMove = null;\r\n            this.onClick = null;\r\n            this.onDoubleClick = null;\r\n            this.onTouchStart = null;\r\n            this.onTouchEnd = null;\r\n            this.onTouchMove = null;\r\n        }\r\n        GUI.prototype.copy = function ()\r\n        {\r\n            var gui = new GUI;\r\n            gui.controls = this.controls;\r\n            gui.ctrlList = this.ctrlList;\r\n            gui.width = this.width;\r\n            gui.height = this.height;\r\n            gui.textCalcu = this.textCalcu;\r\n\r\n            this.onRender = this.onRender;\r\n            this.onMouseDown = this.onMouseDown;\r\n            this.onMouseUp = this.onMouseUp;\r\n            this.onMouseMove = this.onMouseMove;\r\n            this.onClick = this.onClick;\r\n            this.onDoubleClick = this.onDoubleClick;\r\n            this.onTouchStart = this.onTouchStart;\r\n            this.onTouchEnd = this.onTouchEnd;\r\n            this.onTouchMove = this.onTouchMove;\r\n        }\r\n        GUI.prototype.addControl = function (obj)\r\n        {\r\n            this.children.add(obj);\r\n            obj.parent = this;\r\n        }\r\n        GUI.prototype.render = function (graphics)\r\n        {\r\n            this.width = graphics.canvas.width;\r\n            this.height = graphics.canvas.height;\r\n            var gui = this;\r\n            if (this.onRender)\r\n            {\r\n                this.onRender();\r\n            }\r\n            this.children.foreach(function (obj, node)\r\n            {\r\n                if (obj.render)\r\n                    obj.render(graphics);\r\n            });\r\n        }\r\n        GUI.prototype.mouseMoveCallback = function (e)\r\n        {\r\n            this.children.foreach(function (child, node)\r\n            {\r\n                if (child.mouseMoveCallback && child.isPointIn && child.isPointIn(e.x, e.y))\r\n                {\r\n                    child.mouseMoveCallback(e);\r\n                    if (e.handled)\r\n                        return true;\r\n                }\r\n            });\r\n            if (e.handled)\r\n                return;\r\n            if (this.onMouseMove)\r\n                this.onMouseMove(e);\r\n        }\r\n        GUI.prototype.mouseDownCallback = function (e)\r\n        {\r\n            this.children.foreach(function (child, node)\r\n            {\r\n                if (child.mouseDownCallback && child.isPointIn && child.isPointIn(e.x, e.y))\r\n                {\r\n                    child.mouseDownCallback(e);\r\n                    if (e.handled)\r\n                        return true;\r\n                }\r\n            });\r\n            if (e.handled)\r\n                return;\r\n            if (this.onMouseDown)\r\n                this.onMouseDown(e);\r\n        }\r\n        GUI.prototype.mouseUpCallback = function (e)\r\n        {\r\n            this.children.foreach(function (child, node)\r\n            {\r\n                if (child.mouseUpCallback)\r\n                {\r\n                    child.mouseUpCallback(e);\r\n                    if (e.handled)\r\n                        return true;\r\n                }\r\n            });\r\n            if (e.handled)\r\n                return;\r\n            if (this.onMouseUp)\r\n                this.onMouseUp(e);\r\n        }\r\n        GUI.prototype.clickCallback = function (e)\r\n        {\r\n            this.children.foreach(function (child, node)\r\n            {\r\n                if (child.clickCallback && child.isPointIn && child.isPointIn(e.x, e.y))\r\n                {\r\n                    child.clickCallback(e);\r\n                    if (e.handled)\r\n                        return true;\r\n                }\r\n            });\r\n            if (e.handled)\r\n                return;\r\n            if (this.onClick)\r\n                this.onClick(e);\r\n        }\r\n        GUI.prototype.doubleClickCallback = function (e)\r\n        {\r\n            this.children.foreach(function (child, node)\r\n            {\r\n                if (child.doubleClickCallback && child.isPointIn && child.isPointIn(e.x, e.y))\r\n                {\r\n                    child.doubleClickCallback(e);\r\n                    if (e.handled)\r\n                        return true;\r\n                }\r\n            });\r\n            if (e.handled)\r\n                return;\r\n            if (this.onDoubleClick)\r\n                this.onDoubleClick(e);\r\n        }\r\n        GUI.prototype.touchStartCallback = function (e)\r\n        {\r\n            this.children.foreach(function (child, node)\r\n            {\r\n                if (child.touchStartCallback && child.isPointIn && child.isPointIn(e.x, e.y))\r\n                {\r\n                    child.touchStartCallback(e);\r\n                    if (e.handled)\r\n                        return true;\r\n                }\r\n            });\r\n            if (e.handled)\r\n                return;\r\n            if (this.onTouchStart)\r\n                this.onTouchStart(e);\r\n        }\r\n        GUI.prototype.touchEndCallback = function (e)\r\n        {\r\n            this.children.foreach(function (child, node)\r\n            {\r\n                for (var i = 0; i < e.touches.length; i++)\r\n                {\r\n                    //alert(e.touches[i].x + \",\" + e.touches[i].y);\r\n                    //alert(child.isPointIn(e.touches[i].x, e.touches[i].y));\r\n                    if (child.isPointIn && child.isPointIn(e.touches[i].x, e.touches[i].y))\r\n                        return;\r\n                }\r\n                if (child.touchEndCallback)\r\n                {\r\n                    child.touchEndCallback(e);\r\n                    if (e.handled)\r\n                        return true;\r\n                }\r\n            });\r\n            if (e.handled)\r\n                return;\r\n            if (this.onTouchEnd)\r\n                this.onTouchEnd(e);\r\n        }\r\n        GUI.prototype.touchMoveCallback = function (e)\r\n        {\r\n            this.children.foreach(function (child, node)\r\n            {\r\n                if (child.touchMoveCallback)\r\n                {\r\n                    child.touchMoveCallback(e);\r\n                    if (e.handled)\r\n                        return true;\r\n                }\r\n            });\r\n            if (e.handled)\r\n                return;\r\n            if (this.onTouchMove)\r\n                this.onTouchMove(e);\r\n        }\r\n        engine.GUI = GUI;\r\n        window.GUI = GUI;\r\n\r\n        function Block(width, height)\r\n        {\r\n            this.children = new LinkList();\r\n            this.parent = null;\r\n\r\n\r\n            this.widthAuto = false;\r\n            this.heightAuto = true;\r\n            if (isNaN(width))\r\n            {\r\n                width = 0;\r\n                this.widthAuto = true;\r\n            }\r\n            if (isNaN(height))\r\n            {\r\n                height = 0;\r\n                this.heightAuto = true;\r\n            }\r\n            this.width = width;\r\n            this.height = height;\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this.margin = new Thickness(0);\r\n            this.padding = new Thickness(0);\r\n            this.horAlign = HorAlign.Left;\r\n            this.verAlign = VerAlign.Top;\r\n\r\n            this.color = null;\r\n            this.bgColor = null;\r\n            this.border = 1;\r\n            this.font = new Font();\r\n\r\n            this.collider = null;\r\n\r\n            this.onClick = null;\r\n            this.onMouseDown = null;\r\n            this.onMouseUp = null;\r\n            this.onMouseMove = null;\r\n            this.onTouchStart = null;\r\n            this.onTouchEnd = null;\r\n            this.onTouchMove = null;\r\n        }\r\n        Block.prototype.render = function (graphics)\r\n        {\r\n            if ((this.bgColor && this.bgColor.alpha > 0) || (this.color && this.color.alpha > 0 && this.border > 0))\r\n            {\r\n\r\n            }\r\n            this.children.foreach(function (child, node)\r\n            {\r\n                if (child.render)\r\n                    child.render(graphics);\r\n            });\r\n        }\r\n\r\n        function Button(content)\r\n        {\r\n            if (!content)\r\n                content = \"button\";\r\n\r\n            this.parent = null;\r\n            this.content = content;\r\n\r\n            this.width = 0;\r\n            this.widthAuto = true;\r\n            this.height = 0;\r\n            this.heightAuto = true;\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this.margin = new Thickness(0);\r\n            this.padding = new Thickness(0);\r\n            this.horAlign = HorAlign.Left;\r\n            this.verAlign = VerAlign.Top;\r\n\r\n            this.color = new Color(0, 0, 0, 1.00);\r\n            this.bgColor = new Color(0, 0, 0, 0);\r\n            this.border = 1;\r\n            this.radius = 5;\r\n            this.font = new Font();\r\n\r\n            this.collider = null;\r\n\r\n            this.onRender = null;\r\n            this.onClick = null;\r\n            this.onDoubleClick = null;\r\n            this.onMouseMove = null;\r\n            this.onMouseDown = null;\r\n            this.onMouseUp = null;\r\n            this.onMouseMove = null;\r\n            this.onTouchStart = null;\r\n            this.onTouchEnd = null;\r\n            this.onTouchMove = null;\r\n\r\n            this.isPressed = false;\r\n        }\r\n        Button.prototype.copy = function ()\r\n        {\r\n            var button = new Button(this.content);\r\n            button.parent = this.parent;\r\n            button.width = this.width;\r\n            button.width = this.width;\r\n            button.widthAuto = this.widthAuto;\r\n            button.height = this.height;\r\n            button.heightAuto = this.heightAuto;\r\n            button.x = this.x;\r\n            button.y = this.y;\r\n\r\n            button.margin = this.margin.copy();\r\n            button.padding = this.padding.copy();\r\n            button.horAlign = this.horAlign;\r\n            button.verAlign = this.verAlign;\r\n\r\n            button.color = this.color.copy();\r\n            button.bgColor = this.bgColor.copy();\r\n            if (this.border instanceof Thickness)\r\n                button.border = this.border.copy();\r\n            else\r\n                button.border = this.border;\r\n            button.radius = this.radius;\r\n            button.font = this.font;\r\n\r\n            if (this.collider && this.collider.copy)\r\n                button.collider = this.collider.copy();\r\n            else\r\n                button.collider = this.collider;\r\n\r\n            button.onClick = this.onClick;\r\n            button.onMouseDown = this.onMouseDown;\r\n            button.onMouseUp = this.onMouseUp;\r\n            button.onMouseMove = this.onMouseMove;\r\n            button.onTouchStart = this.onTouchStart;\r\n            button.onTouchEnd = this.onTouchEnd;\r\n            button.onTouchMove = this.onTouchMove;\r\n\r\n            return button;\r\n        }\r\n        Button.prototype.render = function (graphics)\r\n        {\r\n            if (this.onRender)\r\n            {\r\n                this.onRender();\r\n            }\r\n            graphics.font = this.font;\r\n            var h = parseInt(this.font.fontSize) * 1.15;//textHeight\r\n            var w = graphics.measureText(this.content).width;//textWidth\r\n            var x = 0, y = 0;//buttonX,buttonY\r\n            var wx = 0, wy = 0;//textX,textY\r\n            var mW = this.parent.width;//maxWidth\r\n            var mH = this.parent.height;//MaxHeight\r\n\r\n            if (this.widthAuto)\r\n            {\r\n                if (this.horAlign == HorAlign.Stretch)\r\n                {\r\n                    this.width = mW - this.margin.left - this.margin.right;\r\n                    this.width = this.width < 0 ? 0 : this.width;\r\n                }\r\n                else\r\n                {\r\n                    this.width = this.padding.left + w + this.padding.right;\r\n                    if (this.margin.left + this.width + this.margin.right > mW)\r\n                    {\r\n                        this.width = mW - this.margin.left - this.margin.right;\r\n                    }\r\n                    this.width = this.width < 0 ? 0 : this.width;\r\n                }\r\n            }\r\n            w = this.width - this.padding.left - this.padding.right;\r\n            w = w < 0 ? 0 : w;\r\n            switch (this.horAlign)\r\n            {\r\n                case HorAlign.Left:\r\n                    x = this.margin.left;\r\n                    break;\r\n                case HorAlign.Right:\r\n                    x = mW - this.margin.right - this.width;\r\n                    break;\r\n                case HorAlign.Stretch:\r\n                    x = (mW - this.margin.left - this.margin.right) / 2 - this.width / 2 + this.margin.left;\r\n                    break;\r\n                case HorAlign.Center:\r\n                    x = (mW - this.width) / 2 + this.margin.left - this.margin.right;\r\n                    break;\r\n            }\r\n            if (this.heightAuto)\r\n            {\r\n\r\n                if (this.verAlign == VerAlign.Stretch)\r\n                {\r\n                    this.height = mH - this.margin.top - this.margin.bottom;\r\n                    this.height = this.height < 0 ? 0 : this.height;\r\n                }\r\n                else\r\n                {\r\n                    this.height = this.padding.top + h + this.padding.bottom;\r\n                    if (this.margin.top + this.height + this.margin.bottom > mH)\r\n                    {\r\n                        this.height = mH - this.margin.top - this.margin.bottom;\r\n                    }\r\n                    this.height = this.height < 0 ? 0 : this.height;\r\n                }\r\n            }\r\n            h = this.height - this.padding.top - this.padding.bottom;\r\n            h = h < 0 ? 0 : h;\r\n            switch (this.verAlign)\r\n            {\r\n                case VerAlign.Top:\r\n                    y = this.margin.top;\r\n                    break;\r\n                case VerAlign.Bottom:\r\n                    y = mH - this.margin.bottom - this.height;\r\n                    break;\r\n                case VerAlign.Stretch:\r\n                    y = this.margin.top;\r\n                    break;\r\n                case VerAlign.Center:\r\n                    y = (mH - this.height) / 2 + this.margin.top + this.margin.bottom;\r\n                    break;\r\n            }\r\n            x += this.parent.x;\r\n            y += this.parent.y;\r\n            this.x = x;\r\n            this.y = y;\r\n            wx = x + w / 2 + this.padding.left;\r\n            wy = y + h / 2 + this.padding.right;\r\n            graphics.textAlign = TextAlign.Center;\r\n            graphics.textAlign = \"center\";\r\n            graphics.textBaseline = \"middle\";\r\n            if (this.isPressed)\r\n            {\r\n                graphics.fillStyle = this.color.toString();\r\n                graphics.fillRoundRect(x, -y, this.width, this.height, this.radius);\r\n                graphics.strokeStyle = this.color.toString();\r\n                graphics.strokeRoundRect(x, -y, this.width, this.height, this.radius);\r\n\r\n                graphics.globalCompositeOperation = Graphics.CompositeOperation.Xor;\r\n                graphics.fillStyle = this.color.toString();\r\n                graphics.fillText(this.content, wx, -wy);\r\n                graphics.globalCompositeOperation = Graphics.CompositeOperation.SourceOver;\r\n                graphics.fillStyle = this.bgColor.toString();\r\n                graphics.fillText(this.content, wx, -wy);\r\n            }\r\n            else\r\n            {\r\n                graphics.fillStyle = this.bgColor.toString();\r\n                graphics.fillRoundRect(x, -y, this.width, this.height, this.radius);\r\n                graphics.strokeStyle = this.color.toString();\r\n                graphics.strokeRoundRect(x, -y, this.width, this.height, this.radius);\r\n                graphics.fillStyle = this.color.toString();\r\n                graphics.fillText(this.content, wx, -wy);\r\n            }\r\n        }\r\n        Button.prototype.isPointIn = function (x, y)\r\n        {\r\n            //alert(\"[\"+this.x+\",\"+(this.x+this.width)+\"][\"+this.y+\",\"+(this.y+this.height)+\"]\"+x+\",\"+y);\r\n            if (this.x <= x && x <= this.x + this.width && this.y <= y && y <= this.y + this.height)\r\n            {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        Button.prototype.mouseMoveCallback = function (e)\r\n        {\r\n            if (this.onMouseMove)\r\n                this.onMouseMove(e);\r\n        }\r\n        Button.prototype.mouseDownCallback = function (e)\r\n        {\r\n            this.isPressed = true;\r\n            if (this.onMouseDown)\r\n                this.onMouseDown(e);\r\n        }\r\n        Button.prototype.mouseUpCallback = function (e)\r\n        {\r\n            var t = this.isPressed;\r\n            this.isPressed = false;\r\n            if (t && this.onMouseUp)\r\n            {\r\n                this.onMouseUp(e);\r\n            }\r\n        }\r\n        Button.prototype.clickCallback = function (e)\r\n        {\r\n            if (this.onClick)\r\n                this.onClick(e);\r\n        }\r\n        Button.prototype.doubleClickCallback = function (e)\r\n        {\r\n            if (this.onClick)\r\n                this.onClick(e);\r\n        }\r\n        Button.prototype.touchStartCallback = function (e)\r\n        {\r\n            this.isPressed = true;\r\n            if (this.onTouchStart)\r\n                this.onTouchStart(e);\r\n        }\r\n        Button.prototype.touchEndCallback = function (e)\r\n        {\r\n            var t = this.isPressed;\r\n            this.isPressed = false;\r\n            if (t && this.onTouchEnd)\r\n                this.onTouchEnd(e);\r\n        }\r\n        Button.prototype.touchMoveCallback = function (e)\r\n        {\r\n            if (this.onTouchMove)\r\n                this.onTouchMove();\r\n        }\r\n        GUI.Button = Button;\r\n\r\n        function TextBlock(text)\r\n        {\r\n            if (!text)\r\n                text = \"textBlock\";\r\n\r\n            this.parent = null;\r\n            this.text = text;\r\n\r\n            this.width = 0;\r\n            this.widthAuto = true;\r\n            this.height = 0;\r\n            this.heightAuto = true;\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this.margin = new Thickness(0);\r\n            this.padding = new Thickness(0);\r\n            this.horAlign = HorAlign.Left;\r\n            this.verAlign = VerAlign.Top;\r\n\r\n            this.color = new Color(0, 0, 0, 1.00);\r\n            this.borderColor = new Color(0, 0, 0, 1.00);\r\n            this.bgColor = new Color(0, 0, 0, 0);\r\n            this.border = new Thickness(0, 0, 0, 0);\r\n            this.font = new Font();\r\n\r\n            this.collider = null;\r\n\r\n            this.onRender = null;\r\n            this.onClick = null;\r\n            this.onMouseDown = null;\r\n            this.onMouseUp = null;\r\n            this.onMouseMove = null;\r\n            this.onTouchStart = null;\r\n            this.onTouchEnd = null;\r\n            this.onTouchMove = null;\r\n        }\r\n        TextBlock.prototype.copy = function ()\r\n        {\r\n\r\n            var textBlock = new Button(this.text);\r\n            textBlock.parent = this.parent;\r\n            textBlock.width = this.width;\r\n            textBlock.width = this.width;\r\n            textBlock.widthAuto = this.widthAuto;\r\n            textBlock.height = this.height;\r\n            textBlock.heightAuto = this.heightAuto;\r\n            textBlock.x = this.x;\r\n            textBlock.y = this.y;\r\n\r\n            textBlock.margin = this.margin.copy();\r\n            textBlock.padding = this.padding.copy();\r\n            textBlock.horAlign = this.horAlign;\r\n            textBlock.verAlign = this.verAlign;\r\n\r\n            textBlock.color = this.color.copy();\r\n            textBlock.borderColor = this.borderColor.copy();\r\n            textBlock.bgColor = this.bgColor.copy();\r\n            textBlock.font = this.font;\r\n\r\n            if (this.border instanceof Thickness)\r\n                textBlock.border = this.border.copy();\r\n            else\r\n                textBlock.border = this.border;\r\n\r\n            if (this.collider && this.collider.copy)\r\n                textBlock.collider = this.collider.copy();\r\n            else\r\n                textBlock.collider = this.collider;\r\n\r\n            textBlock.onClick = this.onClick;\r\n            textBlock.onMouseDown = this.onMouseDown;\r\n            textBlock.onMouseUp = this.onMouseUp;\r\n            textBlock.onMouseMove = this.onMouseMove;\r\n            textBlock.onTouchStartthis.onTouchStart;\r\n            textBlock.onTouchEnd = this.onTouchEnd;\r\n            textBlock.onTouchMove = this.onTouchMove;\r\n\r\n            return textBlock;\r\n        }\r\n        TextBlock.prototype.render = function (graphics)\r\n        {\r\n            if (this.onRender)\r\n            {\r\n                this.onRender();\r\n            }\r\n            graphics.font = this.font;\r\n            var h = parseInt(this.font.fontSize) * 1.15;\r\n            var w = graphics.measureText(this.text).width;\r\n            var x = 0, y = 0;\r\n            var wx = 0, wy = 0;\r\n            var mW = this.parent.width;\r\n            var mH = this.parent.height;\r\n\r\n            if (this.widthAuto)\r\n            {\r\n                if (this.horAlign == HorAlign.Stretch)\r\n                {\r\n                    this.width = mW - this.margin.left - this.margin.right;\r\n                    this.width = this.width < 0 ? 0 : this.width;\r\n                }\r\n                else\r\n                {\r\n                    this.width = this.padding.left + w + this.padding.right;\r\n                    if (this.margin.left + this.width + this.margin.right > mW)\r\n                    {\r\n                        this.width = mW - this.margin.left - this.margin.right;\r\n                    }\r\n                    this.width = this.width < 0 ? 0 : this.width;\r\n                }\r\n            }\r\n            w = this.width - this.padding.left - this.padding.right;\r\n            w = w < 0 ? 0 : w;\r\n            switch (this.horAlign)\r\n            {\r\n                case HorAlign.Left:\r\n                    x = this.margin.left;\r\n                    break;\r\n                case HorAlign.Right:\r\n                    x = mW - this.margin.right - this.width;\r\n                    break;\r\n                case HorAlign.Stretch:\r\n                    x = (mW - this.margin.left - this.margin.right) / 2 - this.width / 2 + this.margin.left;\r\n                    break;\r\n                case HorAlign.Center:\r\n                    x = (mW - this.width) / 2 + this.margin.left - this.margin.right;\r\n                    break;\r\n            }\r\n            if (this.heightAuto)\r\n            {\r\n\r\n                if (this.verAlign == VerAlign.Stretch)\r\n                {\r\n                    this.height = mH - this.margin.top - this.margin.bottom;\r\n                    this.height = this.height < 0 ? 0 : this.height;\r\n                }\r\n                else\r\n                {\r\n                    this.height = this.padding.top + h + this.padding.bottom;\r\n                    if (this.margin.top + this.height + this.margin.bottom > mH)\r\n                    {\r\n                        this.height = mH - this.margin.top - this.margin.bottom;\r\n                    }\r\n                    this.height = this.height < 0 ? 0 : this.height;\r\n                }\r\n            }\r\n            h = this.height - this.padding.top - this.padding.bottom;\r\n            h = h < 0 ? 0 : h;\r\n            switch (this.verAlign)\r\n            {\r\n                case VerAlign.Top:\r\n                    y = this.margin.top;\r\n                    break;\r\n                case VerAlign.Bottom:\r\n                    y = mH - this.margin.bottom - this.height;\r\n                    break;\r\n                case VerAlign.Stretch:\r\n                    y = this.margin.top;\r\n                    break;\r\n                case VerAlign.Center:\r\n                    y = (mH - this.height) / 2 + this.margin.top + this.margin.bottom;\r\n                    break;\r\n            }\r\n            x += this.parent.x;\r\n            y += this.parent.y;\r\n            this.x = x;\r\n            this.y = y;\r\n            wx = x + w / 2 + this.padding.left;\r\n            wy = y + h / 2 + this.padding.right;\r\n            graphics.textAlign = TextAlign.Center;\r\n            graphics.font = this.font;\r\n            graphics.fillStyle = this.bgColor.toString();\r\n            //graphics.fillRoundRect(x, -y, this.width, this.height, this.radius);\r\n            graphics.strokeStyle = this.borderColor.toString();\r\n\r\n            graphics.lineCap = Graphics.LineCap.Butt;\r\n\r\n            //top\r\n            if (this.border.top > 0)\r\n            {\r\n                graphics.lineWidth = this.border.top;\r\n                graphics.drawLine(x, -y, x + this.width, -y);\r\n            }\r\n            //right\r\n            if (this.border.right > 0)\r\n            {\r\n                graphics.lineWidth = this.border.right;\r\n                graphics.drawLine(x + this.width, -y, x + this.width, -(y + this.height));\r\n            }\r\n            //bottom\r\n            if (this.border.bottom > 0)\r\n            {\r\n                graphics.lineWidth = this.border.bottom;\r\n                graphics.drawLine(x + this.width, -(y + this.height), x, -(y + this.height));\r\n            }\r\n            //left\r\n            if (this.border.left > 0)\r\n            {\r\n                graphics.lineWidth = this.border.left;\r\n                graphics.drawLine(x, -(y + this.height), x, -y);\r\n            }\r\n\r\n            graphics.fillStyle = this.color.toString();\r\n            graphics.textAlign = \"center\";\r\n            graphics.textBaseline = \"middle\";\r\n            graphics.fillText(this.text, wx, -wy);\r\n        }\r\n        TextBlock.prototype.isPointIn = function (x, y)\r\n        {\r\n            if (this.x <= x && x <= this.x + this.width && this.y <= y && y <= this.y + this.height)\r\n            {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        TextBlock.prototype.mouseDownCallback = function (e)\r\n        {\r\n\r\n        }\r\n        TextBlock.prototype.mouseUpCallback = function (e)\r\n        {\r\n\r\n        }\r\n        TextBlock.prototype.clickCallback = function (e)\r\n        {\r\n\r\n        }\r\n        TextBlock.prototype.touchStartCallback = function (e)\r\n        {\r\n\r\n        }\r\n        TextBlock.prototype.touchEndCallback = function (e)\r\n        {\r\n\r\n        }\r\n        TextBlock.prototype.touchMoveCallback = function (e)\r\n        {\r\n\r\n        }\r\n\r\n\r\n        GUI.TextBlock = TextBlock;\r\n\r\n        function Joystick()\r\n        {\r\n            this.margin = new Thickness(0);\r\n            this.padding = new Thickness(0);\r\n            this.horAlign = HorAlign.Left;\r\n            this.verAlign = VerAlign.Top;\r\n            this.width = 0;\r\n            this.height = 0;\r\n            this.content = \"\";\r\n            this.color = new Color(0, 0, 0, 1.00);\r\n            this.bgColor = new Color(0, 0, 0, 0);\r\n            this.border = 1;\r\n            this.font = new Font();\r\n            this.onClick = null;\r\n        }\r\n        GUI.Joystick = Joystick;\r\n        //-----------------\r\n\r\n        //-------FontStyle\r\n        function Font(fontFamily, fontSize)\r\n        {\r\n            fontFamily = fontFamily ? fontFamily : \"sans-serif\";\r\n            fontSize = fontSize || fontSize == 0 ? fontSize : \"10px\";\r\n            this.fontFamily = fontFamily;\r\n            this.fontSize = fontSize;\r\n            this.fontStyle = FontStyle.Normal;\r\n            this.fontVariant = FontVariant.Normal;\r\n            this.fontWeight = FontWeight.Normal;\r\n            this.caption = \"\";\r\n            this.icon = \"\";\r\n            this.menu = \"\";\r\n            this.messageBox = \"\";\r\n            this.smallCaption = \"\";\r\n            this.statusBar = \"\";\r\n        }\r\n        Font.prototype.copy = function ()\r\n        {\r\n            var f = new Font(this.fontFamily, this.fontSize);\r\n            f.fontStyle = this.fontStyle;\r\n            f.fontVariant = this.fontVariant;\r\n            f.fontWeight = this.fontWeight;\r\n            f.caption = this.caption;\r\n            f.icon = this.icon;\r\n            f.menu = this.menu;\r\n            f.messageBox = this.messageBox;\r\n            f.smallCaption = this.smallCaption;\r\n            f.statusBar = this.statusBar;\r\n            return f;\r\n        }\r\n        Font.prototype.toString = function ()\r\n        {\r\n            return this.fontStyle + \" \" + this.fontVariant + \" \" + this.fontWeight + \" \" + this.fontSize + \" \" + this.fontFamily;\r\n        }\r\n        window.Font = Font;\r\n        function FontStyle() { }\r\n        FontStyle.Normal = \"normal\";\r\n        FontStyle.Italic = \"italic\";\r\n        FontStyle.Oblique = \"oblique\";\r\n        window.FontStyle = FontStyle;\r\n        function FontVariant() { }\r\n        FontVariant.Normal = \"normal\";\r\n        FontVariant.SmallCaps = \"small-caps\";\r\n        window.FontVariant = FontVariant;\r\n        function FontWeight() { }\r\n        FontWeight.Normal = \"normal\";\r\n        FontWeight.Bold = \"bold\";\r\n        FontWeight.Bolder = \"bolder\";\r\n        FontWeight.Lighter = \"lighter\";\r\n        window.FontWeight = FontWeight;\r\n        function TextAlign() { }\r\n        TextAlign.Start = \"start\";\r\n        TextAlign.End = \"end\";\r\n        TextAlign.Center = \"center\";\r\n        TextAlign.Left = \"left\";\r\n        TextAlign.Right = \"right\";\r\n        window.TextAlign = TextAlign;\r\n        function TextBaseline() { }\r\n        TextBaseline.Alphabetic = \"alphabetic\";\r\n        TextBaseline.Top = \"top\";\r\n        TextBaseline.Hanging = \"hanging\";\r\n        TextBaseline.Middle = \"middle\";\r\n        TextBaseline.Ideographic = \"ideographic\";\r\n        TextBaseline.Bottom = \"bottom\";\r\n        window.TextBaseline = TextBaseline;\r\n\r\n        //-------Text\r\n        function Text(text)\r\n        {\r\n            this.text = text;\r\n            this.font = new Font(\"sans-serif\", 16);\r\n            this.position = new Point(0, 0);\r\n            this.center = new Point(0, 0);\r\n            this.fillStyle = new Color(0, 0, 0, 1);\r\n            this.strokeStyle = new Color(255, 255, 255, 0);\r\n            this.onRender = null;\r\n        }\r\n        Text.prototype.copy = function ()\r\n        {\r\n            var text = new Text(this.text);\r\n            text.font = this.font.copy();\r\n            text.position = this.position.copy();\r\n            text.center = this.center.copy();\r\n            text.onRender = this.onRender;\r\n            if (this.fillStyle && this.fillStyle.copy)\r\n                text.fillStyle = this.fillStyle.copy();\r\n            else\r\n                text.fillStyle = this.fillStyle;\r\n            if (this.strokeStyle && this.strokeStyle.copy)\r\n                text.strokeStyle = this.strokeStyle.copy();\r\n            else\r\n                text.strokeStyle = this.strokeStyle;\r\n            return text;\r\n        }\r\n        Text.prototype.setCenter = function (x, y, align)\r\n        {\r\n            this.position = new Point(x, y);\r\n            if (!align)\r\n                throw new Error(\"未指定对齐方式\");\r\n            this.center = align(this.width, this.height);\r\n            this.center.x = x - this.center.x;\r\n            this.center.y = y + this.center.y;\r\n        }\r\n        Text.prototype.moveTo = function (x, y)\r\n        {\r\n            var rx = this.position.x;\r\n            var ry = this.position.y;\r\n            this.position.x = x;\r\n            this.position.y = y;\r\n            this.center.x = this.center.x - rx + x;\r\n            this.center.y = this.center.y - ry + y;\r\n        }\r\n        Text.prototype.drawToCanvas = function (canvas, x, y, r, dt)\r\n        {\r\n            var ctx = canvas.getContext(\"2d\");\r\n            ctx.font = this.fontStyle + \" \"\r\n                     + this.fontVariant + \" \"\r\n                     + this.fontWeight + \" \"\r\n                     + this.fontSize + \"px \"\r\n                     + this.fontFamily;\r\n            ctx.fillStyle = this.fillStyle;\r\n            ctx.strokeStyle = this.strokeStyle;\r\n            ctx.fillText(this.text, x, y);\r\n            ctx.strokeText(this.text, x, y);\r\n        }\r\n        Text.prototype.render = function (graphics, x, y, r, dt)\r\n        {\r\n            if (!graphics || !graphics.ctx)\r\n                return;\r\n            if (this.onRender)\r\n                this.onRender();\r\n\r\n            graphics.textAlign = TextAlign.Left;\r\n            graphics.textBaseline = TextBaseline.Top;\r\n            graphics.font = this.font;\r\n            graphics.fillText(this.text, this.center.x, this.center.y);\r\n        }\r\n        engine.Text = Text;\r\n        window.Text = Text;\r\n\r\n        engine.Image = function (img)\r\n        {\r\n            if (!img)\r\n                img = new window.Image();\r\n            this.img = img;\r\n            this.position = new Point(0, 0);\r\n            this.o = new Point(0, 0);\r\n            this.onRender = null;\r\n\r\n            var obj = this;\r\n            Object.defineProperty(this, \"width\", {\r\n                get: function ()\r\n                {\r\n                    return obj.img.width;\r\n                },\r\n                set: function (value)\r\n                {\r\n                    obj.img.width = value;\r\n                }\r\n            });\r\n            Object.defineProperty(this, \"height\", {\r\n                get: function ()\r\n                {\r\n                    return obj.img.height;\r\n                },\r\n                set: function (value)\r\n                {\r\n                    obj.img.height = value;\r\n                }\r\n            });\r\n        }\r\n        engine.Image.prototype.copy = function ()\r\n        {\r\n            var img = new engine.Image(img);\r\n            img.position = this.position.copy();\r\n            img.o = this.o.copy();\r\n            img.onRender = this.onRender;\r\n        }\r\n        engine.Image.prototype.setCenter = function (x, y, align)\r\n        {\r\n            this.position = new Point(x, y);\r\n            if (!align)\r\n                throw new Error(\"未指定对齐方式\");\r\n            this.o = align(this.width, this.height);\r\n            this.o.x = x - this.o.x;\r\n            this.o.y = y + this.o.y;\r\n        }\r\n        engine.Image.prototype.moveTo = function (x, y)\r\n        {\r\n            var rx = this.position.x;\r\n            var ry = this.position.y;\r\n            this.position.x = x;\r\n            this.position.y = y;\r\n            this.o.x = this.o.x - rx + x;\r\n            this.o.y = this.o.y - ry + y;\r\n        }\r\n        engine.Image.prototype.loadFromUrl = function (url, width, height, callback)\r\n        {\r\n            this.img = new window.Image();\r\n            var me = this;\r\n            this.img.onload = function (e)\r\n            {\r\n                me.width = me.img.naturalWidth;\r\n                me.height = me.img.naturalHeight;\r\n                if (!width)\r\n                    return;\r\n                if (!height)\r\n                {\r\n                    width();\r\n                    return;\r\n                }\r\n                if (!callback)\r\n                {\r\n                    me.img.width = width;\r\n                    me.img.height = height;\r\n                    return;\r\n                }\r\n                if (callback)\r\n                    callback();\r\n            }\r\n            this.img.src = url;\r\n            if (this.img.complete)\r\n            {\r\n                return;\r\n            }\r\n        }\r\n        engine.Image.prototype.render = function (graphics, x, y, r, dt)\r\n        {\r\n            if (!graphics)\r\n                return;\r\n            if (this.onRender)\r\n                this.onRender();\r\n            graphics.drawImage(this.img, this.o.x, this.o.y, this.width, this.height);\r\n        }\r\n\r\n        //-------Path\r\n        function Path()\r\n        {\r\n            this.pList = (function ()\r\n            {\r\n                var list = [];\r\n                list.add = function (p)\r\n                {\r\n                    list[list.length] = p;\r\n                }\r\n                list.remove = function (index)\r\n                {\r\n                    for (var i = index + 1; i < list.length; i++)\r\n                    {\r\n                        list[i - 1] = list[i];\r\n                    }\r\n                    list.pop();\r\n                }\r\n                list.clear = function ()\r\n                {\r\n                    while (list.length)\r\n                    {\r\n                        list.pop();\r\n                    }\r\n                }\r\n                list.last = function ()\r\n                {\r\n                    return list[list.length - 1];\r\n                }\r\n                return list;\r\n            })();\r\n            this.position = new Point(0, 0);\r\n            this.center = this.position;\r\n            this.strokeStyle = new Color(0, 0, 0, 1);\r\n            this.fillStyle = new Color(255, 255, 255, 1);\r\n            this.strokeWidth = 1;\r\n        }\r\n        Path.Point = function (x, y)\r\n        {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.cp1 = new Point(x, y);\r\n            this.cp2 = new Point(x, y);\r\n        }\r\n        Path.Point.prototype.copy = function ()\r\n        {\r\n            var p = new Point(this.x, this.y);\r\n            p.cp1 = this.cp1.copy();\r\n            p.cp2 = this.cp2.copy();\r\n            return p;\r\n        }\r\n        Path.Point.prototype.moveTo = function (x, y)\r\n        {\r\n            var dx = x - this.x;\r\n            var dy = y - this.y;\r\n            this.cp1.x += dx;\r\n            this.cp1.y += dy;\r\n            this.cp2.x += dx;\r\n            this.cp2.y += dy;\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n        Path.prototype.copy = function ()\r\n        {\r\n            var path = new Path();\r\n            for (var i = 0; i < this.pList.length; i++)\r\n            {\r\n                path.pList[i] = this.pList[i].copy();\r\n            }\r\n            return path;\r\n        }\r\n        Path.prototype.setCenter = function (x, y)\r\n        {\r\n            if (!isNaN(x) && !isNaN(y))\r\n            {\r\n                this.position.x = x;\r\n                this.position.y = y;\r\n                this.center = this.position;\r\n            }\r\n        }\r\n        Path.prototype.moveTo = function (x, y)\r\n        {\r\n            var dx = x - this.position.x;\r\n            var dy = y - this.position.y;\r\n            for (var i = 0; i < this.pList.length; i++)\r\n            {\r\n                this.pList[i].moveTo(this.pList[i].x + dx, this.pList[i].y + dy);\r\n            }\r\n            this.position.x = x;\r\n            this.position.y = y;\r\n        }\r\n        Path.prototype.close = function ()\r\n        {\r\n            if (this.pList.length)\r\n                this.pList.add(this.pList[0]);\r\n        }\r\n        Path.prototype.render = function (graphics, x, y, r, dt)\r\n        {\r\n            graphics.beginPath();\r\n            for (var i = 0; i < this.pList.length - 1; i++)\r\n            {\r\n                var p1 = this.pList[i];\r\n                var p2 = this.pList[i + 1];\r\n                graphics.lineTo(p1.x, p1.y);\r\n                graphics.bezierCurveTo(p1.cp2.x, p1.cp2.y, p2.cp1.x, p2.cp1.y, p2.x, p2.y);\r\n            }\r\n            if (this.pList.last() == this.pList[0])\r\n                graphics.closePath();\r\n            graphics.fillStyle = this.fillStyle.toString();\r\n            graphics.strokeStyle = this.strokeStyle.toString();\r\n            graphics.lineWidth = this.strokeWidth;\r\n            graphics.fill();\r\n            graphics.stroke();\r\n        }\r\n        engine.Path = Path;\r\n        window.Path = Path;\r\n        //-----------\r\n\r\n        //-------ImageAnimation\r\n        function ImageAnimation()\r\n        {\r\n            this.center = new Point(0, 0);\r\n            this.position = this.center.copy();\r\n            this.fCount = 0;\r\n            this.fps = 0;\r\n            this.clipX = 0;\r\n            this.clipY = 0;\r\n            this.fWidth = 0;\r\n            this.fHeight = 0;\r\n            this.time = 0;\r\n            this.img = null;\r\n            this.frame = 0;\r\n            this.playing = true;\r\n            this.reverse = false;\r\n            this.width = 0;\r\n            this.heigh = 0;\r\n            this.onBegine = null;\r\n            this.onEnd = null;\r\n            this.onFrameUpdate = null;\r\n            this.loop = new ImageAnimation.Loop();\r\n        }\r\n        //---ImagImageAnimation.Loop\r\n        ImageAnimation.Loop = function ()\r\n        {\r\n            this.from = 0;\r\n            this.to = 0;\r\n            this.length = 0;\r\n            this.loopTimes = -1;\r\n            this.lt = 0;\r\n            this.enable = true;\r\n            this.onEnd = null;\r\n            this.onStart = null;\r\n        }\r\n        ImageAnimation.Loop.prototype.copy = function ()\r\n        {\r\n            var loop = new ImageAnimation.Loop();\r\n            loop.from = this.from;\r\n            loop.to = this.to;\r\n            loop.length = this.length;\r\n            loop.loopTimes = this.loopTimes;\r\n            loop.lt = this.lt;\r\n            loop.enable = this.enable;\r\n            loop.onEnd = this.onEnd;\r\n            loop.onStart = this.onStart;\r\n            return loop;\r\n        }\r\n        ImageAnimation.Loop.prototype.begin = function ()\r\n        {\r\n            this.enable = true;\r\n            if (this.onStart)\r\n                this.onStart();\r\n        }\r\n        ImageAnimation.Loop.prototype.end = function ()\r\n        {\r\n            var t = this.enable;\r\n            this.enable = false;\r\n            if (t && this.onEnd)\r\n                this.onEnd();\r\n        }\r\n        ImageAnimation.loadFromUrl = function (url, clipX, clipY, fWidth, fHeight, width, height, fCount, fps, callback)\r\n        {\r\n            var ia = new ImageAnimation;\r\n            ia.img = new Image();\r\n            ia.img.onload = function (e)\r\n            {\r\n                ia.fps = fps;\r\n                ia.width = width;\r\n                ia.heigh = height;\r\n                ia.clipFrame(clipX, clipY, fWidth, fHeight, fCount);\r\n                if (callback)\r\n                    callback();\r\n            }\r\n            ia.img.src = url;\r\n            return ia;\r\n        }\r\n        ImageAnimation.create = function (width, height, fCount, fps)\r\n        {\r\n        }\r\n        ImageAnimation.prototype.copy = function ()\r\n        {\r\n            var ia = new ImageAnimation;\r\n            ia.img = this.img;\r\n            ia.center = this.center.copy();\r\n            ia.position = this.position.copy();\r\n            ia.fCount = this.fCount;\r\n            ia.fps = this.fps;\r\n            ia.clipX = this.clipX;\r\n            ia.clipY = this.clipY;\r\n            ia.fWidth = this.fWidth;\r\n            ia.fHeight = this.fHeight;\r\n            ia.time = this.time;\r\n            ia.width = this.width;\r\n            ia.heigh = this.heigh;\r\n            ia.frame = this.frame;\r\n            ia.playing = this.playing;\r\n            ia.reverse = this.reverse;\r\n            ia.onBegine = this.onBegine;\r\n            ia.onEnd = this.onEnd;\r\n            ia.onFrameUpdate = this.onFrameUpdate;\r\n            ia.loop = this.loop.copy();\r\n            return ia;\r\n        }\r\n        ImageAnimation.prototype.setCenter = function (x, y, align)\r\n        {\r\n            this.position = new Point(x, y);\r\n            if (!align)\r\n                throw new Error(\"未指定对齐方式\");\r\n            this.center = align(this.width, this.heigh);\r\n            this.center.x = x - this.center.x;\r\n            this.center.y = y + this.center.y;\r\n        }\r\n        ImageAnimation.prototype.moveTo = function (x, y)\r\n        {\r\n            var rx = this.position.x;\r\n            var ry = this.position.y;\r\n            this.position.x = x;\r\n            this.position.y = y;\r\n            this.center.x = this.center.x - rx + x;\r\n            this.center.y = this.center.y - ry + y;\r\n        }\r\n        ImageAnimation.prototype.clipFrame = function (clipX, clipY, fWidth, fHeight, fCount)\r\n        {\r\n            this.clipX = clipX;\r\n            this.clipY = clipY;\r\n            this.fWidth = fWidth;\r\n            this.fHeight = fHeight;\r\n            this.fCount = fCount;\r\n            this.loop.from = 0;\r\n            this.loop.to = fCount - 1;\r\n        }\r\n        ImageAnimation.prototype.begine = function ()\r\n        {\r\n            this.playing = true;\r\n            this.time = 0;\r\n            this.frame = 0;\r\n            this.loop.lt = 0;\r\n        }\r\n        ImageAnimation.prototype.end = function ()\r\n        {\r\n            var t = this.playing;\r\n            this.playing = false;\r\n            if (this.onEnd && t)\r\n            {\r\n                this.onEnd();\r\n            }\r\n        }\r\n        ImageAnimation.prototype.play = function ()\r\n        {\r\n            this.playing = true;\r\n            this.time = 0;\r\n        }\r\n        ImageAnimation.prototype.drawToCanvas = function (canvas, x, y, r, dt)\r\n        {\r\n\r\n        }\r\n        ImageAnimation.prototype.preload = function (graphics)\r\n        {\r\n            graphics.drawImage(this.img, 0, 0, this.fWidth, this.fHeight, 0, 0, this.width, this.heigh);\r\n            graphics.clearRect(0, 0, this.width, this.height);\r\n        }\r\n        ImageAnimation.prototype.render = function (graphics, x, y, r, dt)\r\n        {\r\n            if (this.time == 0 && this.onBegine)\r\n                this.onBegine();\r\n            this.time += dt;\r\n            var f = Math.floor(this.time / (1 / this.fps));\r\n            if (this.reverse)\r\n                f = this.fCount - f;\r\n            if (this.loop.enable)\r\n            {\r\n                if (f > this.loop.to)\r\n                {\r\n                    this.loop.lt++;\r\n                    if (this.loop.loopTimes > 0 && this.loop.lt >= this.loop.loopTimes)\r\n                    {\r\n                        this.loop.enable = false;\r\n                        f = f % this.fCount;\r\n                    }\r\n                    else\r\n                    {\r\n                        f -= this.loop.from;\r\n                        f %= (this.loop.to - this.loop.from);\r\n                        if (!f)\r\n                            f = 0;\r\n                        f = this.loop.from + f;\r\n                    }\r\n                }\r\n            }\r\n            else if (this.playing)\r\n            {\r\n                if (f >= this.fCount && !this.reverse)\r\n                {\r\n                    this.frame = f = this.fCount - 1;\r\n                    this.end();\r\n                }\r\n                if (f <= 0 && this.reverse)\r\n                {\r\n                    this.frame = f = 0;\r\n                    this.end();\r\n                }\r\n                //f = f % this.fCount;\r\n            }\r\n            if (this.playing)\r\n            {\r\n                var F = f;\r\n                if (this.frame != f && this.onFrameUpdate)\r\n                    F = this.onFrameUpdate(f);\r\n                if (!isNaN(F))\r\n                    f = F;\r\n                this.frame = f;\r\n            }\r\n            graphics.drawImage(this.img, this.clipX + (this.fWidth * this.frame), this.clipY, this.fWidth, this.fHeight, this.center.x, this.center.y, this.width, this.heigh);\r\n        }\r\n        engine.ImageAnimation = ImageAnimation;\r\n        window.ImageAnimation = ImageAnimation;\r\n\r\n        //--------------Collider\r\n        //-------Vector2\r\n        function Vector2(x, y)\r\n        {\r\n            this.x = x;\r\n            this.y = y;\r\n\r\n        }\r\n        Vector2.fromPoint = function (p1, p2)\r\n        {\r\n            return new Vector2(p2.x - p1.x, p2.y - p1.y);\r\n        }\r\n        Vector2.prototype.copy = function ()\r\n        {\r\n            return new Vector2(this.x, this.y);\r\n        }\r\n        Vector2.prototype.toString = function ()\r\n        {\r\n            return \"(\" + this.x + \",\" + this.y + \")\";\r\n        }\r\n        Vector2.prototype.getLength = function ()\r\n        {\r\n            return Math.sqrt(this.x * this.x + this.y * this.y);\r\n        }\r\n        Vector2.prototype.mod = function ()\r\n        {\r\n            return Math.sqrt(this.x * this.x + this.y * this.y);\r\n        }\r\n        Vector2.prototype.plus = function (v)\r\n        {\r\n            if (!(v instanceof Vector2))\r\n                throw new Error(\"v must be a Vector\");\r\n            this.x = this.x + v.x;\r\n            this.y = this.y + v.y;\r\n            return this;\r\n        }\r\n        Vector2.prototype.minus = function (v)\r\n        {\r\n            if (!(v instanceof Vector2))\r\n                throw new Error(\"v must be a Vector\");\r\n            this.x = this.x - v.x;\r\n            this.y = this.y - v.y;\r\n            return this;\r\n        }\r\n        Vector2.prototype.multi = function (n)\r\n        {\r\n            if (!isNaN(n))\r\n            {\r\n                this.x *= n;\r\n                this.y *= n;\r\n                return this;\r\n            }\r\n        }\r\n        Vector2.plus = function (u, v)\r\n        {\r\n            if (!(u instanceof Vector2) || !(u instanceof Vector2))\r\n            {\r\n                throw new Error(\"u and v must be an Vector2.\");\r\n            }\r\n            return new Vector2(u.x + v.x, u.y + v.y);\r\n        }\r\n        Vector2.minus = function (u, v)\r\n        {\r\n            if (!(u instanceof Vector2) || !(u instanceof Vector2))\r\n            {\r\n                throw new Error(\"u and v must be an Vector2.\");\r\n            }\r\n            return new Vector2(u.x - v.x, u.y - v.y);\r\n        }\r\n        Vector2.multi = function (u, v)\r\n        {\r\n            if (!(u instanceof Vector2))\r\n            {\r\n                throw new Error(\"u must be an Vector2.\");\r\n            }\r\n            if (v instanceof Vector2)\r\n            {\r\n                return (u.x * v.x + u.y * v.y);\r\n            }\r\n            else if (!isNaN(v))\r\n            {\r\n                return (new Vector2(u.x * v, u.y * v));\r\n            }\r\n        }\r\n        engine.Vector2 = Vector2;\r\n        window.Vector2 = Vector2;\r\n\r\n        //-------Point\r\n        function Point(x, y)\r\n        {\r\n            if (isNaN(x) || isNaN(y))\r\n                throw \"x and y must be numbers.\";\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n        Point.prototype.copy = function ()\r\n        {\r\n            return new Point(this.x, this.y);\r\n        }\r\n        Point.prototype.toString = function ()\r\n        {\r\n            return \"(\" + this.x + \",\" + this.y + \")\";\r\n        }\r\n        Point.prototype.rotate = function (o, ang)\r\n        {\r\n            var x = this.x - o.x;\r\n            var y = this.y - o.y;\r\n            var dx = x * Math.cos(ang) - y * Math.sin(ang);\r\n            var dy = y * Math.cos(ang) + x * Math.sin(ang);\r\n            return new Point(o.x + dx, o.y + dy);\r\n        }\r\n        Point.prototype.isBelongTo = function (l)\r\n        {\r\n            if (!(this.lines instanceof Array))\r\n                throw \"this object has something wrong.\";\r\n            for (var i = 0; i < this.lines.length; i++)\r\n            {\r\n                if (this.lines[i] == l)\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n        Point.prototype.addLine = function (l)\r\n        {\r\n            if (!(this.lines instanceof Array))\r\n                throw \"this object has something wrong.\";\r\n            this.lines[this.lines.length] = l;\r\n        }\r\n        Point.prototype.render = function (graphics, x, y, r, dt)\r\n        {\r\n\r\n        }\r\n        engine.Point = Point;\r\n        window.Point = Point;\r\n\r\n        //-------Line\r\n        function Line(_p1, _p2)\r\n        {\r\n            var p1 = _p1, p2 = _p2;\r\n            if ((_p1 instanceof Vector2) && (_p2 instanceof Vector2))\r\n            {\r\n                p1 = new Point(_p1.x, _p1.y, this);\r\n                p2 = new Point(_p2.x, _p2.y, this);\r\n            }\r\n            /*else if (!(p1.x && !isNaN(p1.x) && p1.y && !isNaN(p1.y) &&\r\n                p2.x && !isNaN(p2.x) && p2.y && !isNaN(p2.y)))\r\n            {\r\n                throw new Error(\"P1 or P2 is not a Point.\");\r\n            }\r\n            else if (!(p1 instanceof Point) || !(p2 instanceof Point))\r\n            {\r\n                \r\n                throw new Error(\"P1 or P2 is not a Point.\");\r\n            }*/\r\n            this.p1 = p1;\r\n            this.p2 = p2;\r\n            this.center = new Point((p1.x + p2.x) / 2, (p1.y + p2.y) / 2);\r\n            this.position = this.center;\r\n            this.strokeStyle = new Color(0, 0, 0, 1.00);\r\n        }\r\n        Line.prototype.copy = function ()\r\n        {\r\n            var p1 = this.p1.copy();\r\n            var p2 = this.p2.copy();\r\n            var line = new Line(p1, p2);\r\n            line.setCenter(this.center.x, this.center.y);\r\n            return line;\r\n        }\r\n        Line.prototype.setCenter = function (x, y)\r\n        {\r\n            this.center.x = x;\r\n            this.center.y = y;\r\n        }\r\n        Line.prototype.moveTo = function (x, y)\r\n        {\r\n            if (x == this.center.x && y == this.center.y)\r\n                return;\r\n            this.p1.x = this.p1.x - this.center.x + x;\r\n            this.p1.y = this.p1.y - this.center.y + y;\r\n            this.p2.x = this.p2.x - this.center.x + x;\r\n            this.p2.y = this.p2.y - this.center.y + y;\r\n            this.center.x = x;\r\n            this.center.y = y;\r\n        }\r\n        Line.prototype.isCross = function (obj)\r\n        {\r\n            if (obj instanceof Line)\r\n            {\r\n                var p1 = this.p1;\r\n                var p2 = this.p2;\r\n                var p3 = obj.p1;\r\n                var p4 = obj.p2;\r\n                var v13 = new Vector2(p3.x - p1.x, p3.y - p1.y);\r\n                var v14 = new Vector2(p4.x - p1.x, p4.y - p1.y);\r\n                var v31 = new Vector2(p1.x - p3.x, p1.y - p3.y);\r\n                var v32 = new Vector2(p2.x - p3.x, p2.y - p3.y);\r\n                var v12 = new Vector2(p2.x - p1.x, p2.y - p1.y);\r\n                var v34 = new Vector2(p4.x - p3.x, p4.y - p3.y);\r\n                if ((v13.x * v12.y - v12.x * v13.y) * (v14.x * v12.y - v12.x * v14.y) < 0 && (v31.x * v34.y - v34.x * v31.y) * (v32.x * v34.y - v34.x * v32.y) < 0)\r\n                    return true;\r\n                return false;\r\n            }\r\n            else if (obj instanceof Circle)\r\n            {\r\n                var v1 = new Vector2(obj.o.x - this.p1.x, obj.o.y - this.p1.y);\r\n                var v2 = new Vector2(this.p2.x - this.p1.x, this.p2.y - this.p1.y);\r\n                var v3 = new Vector2(obj.o.x - this.p2.x, obj.o.y - this.p2.y);\r\n                var v4 = new Vector2(-v2.x, -v2.y);\r\n                var d1 = (obj.o.x - this.p1.x) * (obj.o.x - this.p1.x) + (obj.o.y - this.p1.y) * (obj.o.y - this.p1.y);\r\n                d1 = (d1 <= obj.r * obj.r) ? 1 : 0;\r\n                var d2 = (obj.o.x - this.p2.x) * (obj.o.x - this.p2.x) + (obj.o.y - this.p2.y) * (obj.o.y - this.p2.y);\r\n                d2 = (d2 <= obj.r * obj.r) ? 1 : 0;\r\n                if (d1 ^ d2)\r\n                    return true;\r\n                if (d1 && d2)\r\n                    return false;\r\n                if ((v1.x * v2.x + v1.y * v2.y < 0) || (v3.x * v4.x + v3.y * v4.y < 0))\r\n                {\r\n                    return false;\r\n                }\r\n                if (v3.x * v4.x + v3.y * v4.y < 0)\r\n                {\r\n\r\n                }\r\n                var x = v1.x * v2.y - v2.x * v1.y;\r\n                var l = v2.x * v2.x + v2.y * v2.y;\r\n                l = l * obj.r * obj.r;\r\n                x *= x;\r\n\r\n                if (x <= l)\r\n                    return true;\r\n                return false;\r\n            }\r\n        }\r\n        Line.prototype.render = function (graphics, x, y, r, dt)\r\n        {\r\n            graphics.beginPath();\r\n            graphics.moveTo(this.p1.x, this.p1.y);\r\n            graphics.lineTo(this.p2.x, this.p2.y);\r\n            graphics.strokeStyle = this.strokeStyle;\r\n            graphics.stroke();\r\n        }\r\n        Line.prototype.toGameObject = function ()\r\n        {\r\n            var obj = new GameObject();\r\n            obj.graphic = this;\r\n            return obj;\r\n        }\r\n        engine.Line = Line;\r\n        window.Line = Line;\r\n\r\n        //-------GameObject\r\n        function GameObject()\r\n        {\r\n            this.id = null;\r\n            this.name = \"GameObject\";\r\n            this.graphic = null;\r\n            this.collider = null;\r\n            this.layer = 0;\r\n            this.zIndex = 0;\r\n            this.mass = 1;\r\n            this.gravity = true;\r\n            this.onGround = false;\r\n            this.hitTest = false;\r\n            this.F = new Force(0, 0);\r\n            this.constantForce = new Force(0, 0);\r\n            this.v = new Vector2(0, 0);\r\n            this.a = new Vector2(0, 0);\r\n            this.position = new Point(0, 0);\r\n            this.center = this.position;\r\n            this.rotation = 0.0;\r\n            this.onRender = null;\r\n            this.onUpdate = null;\r\n            this.onStart = null;\r\n            this.onCollide = null;\r\n            this.onMouseDown = null;\r\n            this.onMouseUp = null;\r\n            this.onClick = null;\r\n            this.onDoubleClick = null;\r\n        }\r\n        GameObject.CollideEventArgs = function (target)\r\n        {\r\n            this.target = target;\r\n            this.e = 1;\r\n            this.dff = 0;\r\n            this.ignore = false;\r\n        }\r\n        GameObject.prototype.copy = function ()\r\n        {\r\n            var obj = new GameObject();\r\n            obj.name = this.name;\r\n            obj.layer = this.layer;\r\n            obj.zIndex = this.zIndex;\r\n            if (this.graphic)\r\n            {\r\n                obj.graphic = this.graphic.copy ? this.graphic.copy() : this.graphic;\r\n            }\r\n            if (this.collider)\r\n            {\r\n                obj.collider = this.collider.copy ? this.collider.copy() : this.collider;\r\n            }\r\n            obj.mass = this.mass;\r\n            obj.gravity = this.gravity;\r\n            obj.onGround = this.onGround;\r\n            obj.hitTest = this.hitTest;\r\n            obj.constantForce = this.constantForce;\r\n            obj.F = this.F.copy();\r\n            obj.v = this.v.copy();\r\n            obj.a = this.a.copy();\r\n            obj.position = this.position.copy();\r\n            obj.center = obj.position;\r\n            obj.rotation = this.rotation;\r\n            obj.onRender = this.onRender;\r\n            obj.onUpdate = this.onUpdate;\r\n            obj.onStart = this.onStart;\r\n            obj.onCollide = this.onCollider;\r\n            obj.onMouseDown = this.onMouseDown;\r\n            obj.onMouseUp = this.onMouseUp;\r\n            obj.onClick = this.onClick;\r\n            obj.onDoubleClick = this.onDoubleClick;\r\n            return obj;\r\n        }\r\n        GameObject.prototype.resetForce = function ()\r\n        {\r\n            this.F.x = 0;\r\n            this.F.y = 0\r\n        }\r\n        GameObject.prototype.resetConstantForce = function ()\r\n        {\r\n            this.constantForce.x = 0;\r\n            this.constantForce.y = 0;\r\n        }\r\n        GameObject.prototype.force = function (a, b, c)\r\n        {\r\n            if (a instanceof Force)\r\n            {\r\n                if (b)\r\n                {\r\n                    this.constantForce.x += a.x;\r\n                    this.constantForce.y += a.y;\r\n                    return this.constantForce;\r\n                }\r\n                this.F.x += a.x;\r\n                this.F.y += a.y;\r\n                return this.F;\r\n            }\r\n            else if (isNaN(a) || isNaN(b))\r\n            {\r\n                throw new Error(\"Paramate must be a Number.\");\r\n            }\r\n            else\r\n            {\r\n                if (c)\r\n                {\r\n                    this.constantForce.x += a;\r\n                    this.constantForce.y += b;\r\n                    return this.constantForce;\r\n                }\r\n                this.F.x += a;\r\n                this.F.y += b;\r\n                return this.F;\r\n            }\r\n        }\r\n        GameObject.prototype.addMomenta = function (p)\r\n        {\r\n\r\n        }\r\n        GameObject.prototype.drawToCanvas = function (canvas, x, y, r, dt)\r\n        {\r\n            if (this.graphic)\r\n                this.graphic.drawToCanvas(canvas, x, y, r, dt);\r\n        }\r\n        GameObject.prototype.render = function (graphics, x, y, r, dt)\r\n        {\r\n            if (this._animCallback)\r\n                this._animCallback(dt);\r\n            if (this.graphic)\r\n                this.graphic.render(graphics, x, y, r, dt);\r\n        }\r\n        GameObject.prototype.setCenter = function (x, y)\r\n        {\r\n            this.position.x = x;\r\n            this.position.y = y;\r\n        }\r\n        GameObject.prototype.moveTo = function (x, y)\r\n        {\r\n            if (this.graphic)\r\n            {\r\n                this.graphic.moveTo(this.graphic.position.x - this.position.x + x, this.graphic.position.y - this.position.y + y);\r\n            }\r\n            if (this.collider && this.collider != this.graphic)\r\n            {\r\n                this.collider.moveTo(this.collider.position.x - this.position.x + x, this.collider.position.y - this.position.y + y);\r\n            }\r\n            this.position.x = x;\r\n            this.position.y = y;\r\n        }\r\n        GameObject.prototype.moveAnimateTo = function (x, y, t, callback)\r\n        {\r\n            var startPosition = this.position.copy();\r\n            var time = 0;\r\n            var gameObject = this;\r\n            this._animCallback = function (dt)\r\n            {\r\n                time += dt;\r\n                if (time >= t)\r\n                    time = t;\r\n                gameObject.moveTo((x - startPosition.x) / t * time + startPosition.x, (y - startPosition.y) / t * time + startPosition.y);\r\n                if (time == t)\r\n                {\r\n                    gameObject._animCallback = null;\r\n                    if (callback)\r\n                        callback();\r\n                }\r\n            }\r\n        }\r\n        engine.GameObject = GameObject;\r\n        window.GameObject = GameObject;\r\n\r\n\r\n\r\n        //-------Colliders\r\n        function Colliders() { }\r\n\r\n\r\n\r\n        //-------Circle\r\n        function Circle(r)\r\n        {\r\n            if (!r)\r\n                r = 0;\r\n            this.r = r;\r\n            this.o = new Point(0, 0);\r\n            this.position = new Point(0, 0);\r\n            this.center = this.position;\r\n            this.angV = 0;\r\n            this.rotate = 0;\r\n            this.rigidBody = false;\r\n            this.e = 1;\r\n            this.I = 1;//moment of inercial\r\n            this.mass = 1;\r\n            this.dff = 0;//dynamic friction factor\r\n            this.static = false;\r\n            this.soft = true;\r\n            this.landed = false;\r\n            this.strokeWidth = 1;\r\n            this.strokeStyle = new Color(0, 0, 0, 1);\r\n            this.fillStyle = new Color(255, 255, 255, 1);\r\n        }\r\n        Circle.prototype.copy = function ()\r\n        {\r\n            var circle = new Circle(this.r);\r\n            circle.setCenter(this.o.x, this.o.y);\r\n            circle.strokeWidththis.strokeWidth;\r\n            if (this.strokeStyle instanceof Color)\r\n                circle.strokeStyle = this.strokeStyle.copy();\r\n            else\r\n                circle.strokeStyle = this.strokeStyle;\r\n            if (this.fillStyle instanceof Color)\r\n                circle.fillStyle = this.fillStyle.copy();\r\n            else\r\n                circle.fillStyle = this.fillStyle;\r\n            return circle;\r\n        }\r\n        Circle.prototype.setPosition = function (x, y)\r\n        {\r\n            this.o.x += x - this.position.x;\r\n            this.o.y += y - this.position.y;\r\n            this.position.x = x;\r\n            this.position.y = y;\r\n        }\r\n        Circle.prototype.setCenter = function (x, y)\r\n        {\r\n            this.position.x = x;\r\n            this.position.y = y;\r\n        }\r\n        Circle.prototype.moveTo = function (x, y)\r\n        {\r\n            if (x == this.position.x && y == this.position.y)\r\n                return;\r\n            this.o.x = this.o.x - this.position.x + x;\r\n            this.o.y = this.o.y - this.position.y + y;\r\n            this.position.x = x;\r\n            this.position.y = y;\r\n        }\r\n        Circle.prototype.drawToCanvas = function (canvas, x, y, r, dt)\r\n        {\r\n            var ctx = canvas.getContext(\"2d\");\r\n            ctx.beginPath();\r\n            ctx.arc(this.o.x, this.o.y, this.r, 0, 2 * Math.PI);\r\n            ctx.lineWidth = this.strokeWidth;\r\n            ctx.strokeStyle = this.strokeStyle;\r\n            ctx.fillStyle = this.fillStyle;\r\n            ctx.fill();\r\n            ctx.stroke();\r\n        }\r\n        Circle.prototype.render = function (graphics, x, y, r, dt)\r\n        {\r\n            graphics.beginPath();\r\n            graphics.arc(this.o.x, this.o.y, this.r, 0, 2 * Math.PI);\r\n            graphics.lineWidth = this.strokeWidth;\r\n            graphics.strokeStyle = this.strokeStyle;\r\n            graphics.fillStyle = this.fillStyle;\r\n            graphics.fill();\r\n            graphics.stroke();\r\n        }\r\n        Circle.prototype.isCross = function (obj)\r\n        {\r\n            if (obj instanceof Line)\r\n            {\r\n                return obj.isCross(this);\r\n            }\r\n            else if (obj instanceof Circle)\r\n            {\r\n                return this.isCollideWith(obj);\r\n            }\r\n        }\r\n        Circle.prototype.isCollideWith = function (col)\r\n        {\r\n            if (col instanceof Polygon)\r\n            {\r\n                for (var i = 0; i < col.E.length; i++)\r\n                {\r\n                    if (col.E[i].isCross(this))\r\n                        return true;\r\n                }\r\n                return false;\r\n            }\r\n            else if (col instanceof Circle)\r\n            {\r\n                var dx = this.o.x - col.o.x;\r\n                var dy = this.o.y - col.o.y;\r\n                var d = dx * dx + dy * dy;\r\n                if ((this.r - col.r) * (this.r - col.r) <= d && d <= (this.r + col.r) * (this.r + col.r))\r\n                    return true;\r\n                return false;\r\n            }\r\n            else if (col instanceof Rectangle)\r\n            {\r\n                if (col.o.x <= this.o.x && this.o.x <= col.o.x + col.width)\r\n                {\r\n                    if (col.o.y - this.r <= this.o.y && this.o.y <= col.o.y + col.height + this.r)\r\n                        return true;\r\n                }\r\n                if (col.o.y <= this.o.y && this.o.y <= col.o.y + col.height)\r\n                {\r\n                    if (col.o.x - this.r <= this.o.x && this.o.x <= col.o.x + col.width + this.r)\r\n                        return true;\r\n                }\r\n                for (var i = 0; i < 4; i++)\r\n                {\r\n                    var p = col.V[i];\r\n                    if (((p.x - this.o.x) * (p.x - this.o.x) + (p.y - this.o.y) * (p.y - this.o.y)) <= this.r * this.r)\r\n                        return true;\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n        Circle.prototype.collide = function (self, target, dt)\r\n        {\r\n            if (self.collider.static && target.collider.static)\r\n                return;\r\n            if (target.collider instanceof Circle)\r\n            {\r\n                var args = new GameObject.CollideEventArgs();\r\n                args.dff = Math.min(self.collider.dff, target.collider.dff);\r\n                args.e = Math.min(self.collider.e, target.collider.e);\r\n                if (self.onCollide)\r\n                {\r\n                    args.target = target;\r\n                    self.onCollide(args);\r\n                    if (args.ignore)\r\n                        return;\r\n                }\r\n                if (target.onCollide)\r\n                {\r\n                    args.target = self;\r\n                    target.onCollide(args);\r\n                    if (args.ignore)\r\n                        return;\r\n                }\r\n                var o1 = self.collider.o;\r\n                var o2 = target.collider.o;\r\n                var m1 = self.collider.mass;\r\n                var m2 = target.collider.mass;\r\n                var v0 = self.v;\r\n                var e = args.e;\r\n                var dff = args.dff;\r\n                var v1 = new Vector2(0, 0);\r\n                var v2 = new Vector2(target.v.x - v0.x, target.v.y - v0.y);\r\n                var o21 = new Vector2(o1.x - o2.x, o1.y - o2.y);\r\n                var n = new Vector2(o21.y, -o21.x);\r\n                var Lo21 = o21.x * o21.x + o21.y * o21.y;\r\n                var Ln = n.x * n.x + n.y * n.y;\r\n                var vt = Vector2.multi(n, (v2.x * n.x + v2.y * n.y) / Ln);\r\n                var Lvn = v2.x * o21.x + v2.y * o21.y;\r\n                if (Lvn <= 0)\r\n                {\r\n                    return;\r\n\r\n                }\r\n                var vn = Vector2.multi(o21, Lvn / Lo21);\r\n                //alert((v2.x*o21.x+v2.y*o21.y)/Lo21);\r\n                v1 = Vector2.multi(vn, (m2 + e * m2) / (m1 + m2));\r\n                v2 = Vector2.multi(vn, (m2 - e * m1) / (m1 + m2));\r\n                v1.plus(v0);\r\n                v2.plus(vt);\r\n                v2.plus(v0);\r\n                self.v = v1;\r\n                target.v = v2;\r\n            }\r\n            else if (target.collider instanceof Rectangle)\r\n            {\r\n                var args = new GameObject.CollideEventArgs();\r\n                args.dff = Math.min(self.collider.dff, target.collider.dff);\r\n                args.e = Math.min(self.collider.e, target.collider.e);\r\n                if (self.onCollide)\r\n                {\r\n                    args.target = target;\r\n                    self.onCollide(args);\r\n                    if (args.ignore)\r\n                        return;\r\n                }\r\n                if (target.onCollide)\r\n                {\r\n                    args.target = self;\r\n                    target.onCollide(args);\r\n                    if (args.ignore)\r\n                        return;\r\n                }\r\n                var e = args.e;\r\n                var dff = args.dff;\r\n                var m1 = target.mass;\r\n                var m2 = self.mass;\r\n                var rect = target.collider;\r\n                var circle = self.collider;\r\n                var dx = -1, dy = -1;\r\n                var v0 = target.v;\r\n                var v1 = new Vector2(0, 0);\r\n                var v2 = new Vector2(self.v.x - v0.x, self.v.y - v0.y);\r\n\r\n                var minL = null;\r\n                var minLD = -1;\r\n                for (var i = 0; i < 4; i++)\r\n                {\r\n                    var l = rect.E[i];\r\n                    if (v2.x * l.norV.x + v2.y * l.norV.y > 0) //Away from edge\r\n                        continue;\r\n                    var n = new Vector2(circle.o.x - l.p1.x, circle.o.y - l.p1.y);\r\n                    var t = l.tanV.x * n.x + l.tanV.y * n.y;\r\n                    if (0 <= t && t <= l.length) //In edge\r\n                    {\r\n                        var d = (n.x * l.norV.x + n.y * l.norV.y);\r\n                        if (0 <= d && d <= circle.r) //Touch\r\n                        {\r\n                            if (d < minLD || minLD < 0)\r\n                            {\r\n                                minL = l;\r\n                                minLD = d;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                minP = null;\r\n                minPD = -1;\r\n                for (var i = 0; i < 4; i++)\r\n                {\r\n                    var p = rect.V[i];\r\n                    if (v2.x * p.norV.x + v2.y * p.norV.y > 0) //Away from Point\r\n                        continue;\r\n                    var n = new Vector2(circle.o.x - p.x, circle.o.y - p.y);\r\n                    var d = n.mod();\r\n                    if (0 <= d && d <= circle.r)\r\n                    {\r\n                        if (d < minPD || minPD < 0)\r\n                        {\r\n                            minP = p;\r\n                            minPD = d;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (minLD < 0 && minPD < 0)\r\n                    return;\r\n\r\n                var vn = null, vt = null;\r\n                if (minPD < 0 || (minLD > 0 && minLD <= minPD)) //Collide with edge\r\n                {\r\n                    vn = Vector2.multi(minL.norV, (v2.x * minL.norV.x + v2.y * minL.norV.y));\r\n                    vt = new Vector2(v2.x - vn.x, v2.y - vn.y);\r\n                }\r\n                else if (minLD < 0 || (minPD >= 0 && minPD < minLD)) //Collide with Point\r\n                {\r\n                    var n = new Vector2(minP.x - circle.o.x, minP.y - circle.o.y);\r\n                    var Ln = n.x * n.x + n.y * n.y;\r\n                    vn = Vector2.multi(n, (n.x * v2.x + n.y * v2.y) / Ln);\r\n                    vt = new Vector2(v2.x - vn.x, v2.y - vn.y);\r\n                }\r\n                else\r\n                    return;\r\n                if (!vn || !vt)\r\n                    return;\r\n                if (self.collider.static)\r\n                {\r\n                    v1.x = 2 * vn.x;\r\n                    v1.y = 2 * vn.y;\r\n                }\r\n                else if (target.collider.static)\r\n                {\r\n                    v2.x = -vn.x;\r\n                    v2.y = -vn.y;\r\n                }\r\n                else\r\n                {\r\n                    v1 = Vector2.multi(vn, (m2 + e * m2) / (m1 + m2));\r\n                    v2 = Vector2.multi(vn, (m2 - e * m1) / (m1 + m2));\r\n                }\r\n                v2.plus(vt);\r\n                v2.plus(v0);\r\n                v1.plus(v0);\r\n                target.v = v1;\r\n                self.v = v2;\r\n            }\r\n            else\r\n            {\r\n                return;\r\n                return target.collider.collide(target, self, dt);\r\n            }\r\n        }\r\n        Colliders.Circle = Circle;\r\n        window.Circle = Circle;\r\n\r\n        //-------Polygon\r\n        function Polygon(v)\r\n        {\r\n            if (!(v instanceof Array))\r\n                throw new Error(\"Paramater v must be a array of points\");\r\n            this.E = new Array();\r\n            this.V = new Array();\r\n            this.strokeWidth = 1;\r\n            this.strokeStyle = new Color(0, 0, 0, 1);\r\n            this.fillStyle = new Color(255, 255, 255, 1);\r\n            this.V = v;\r\n            this.E = new Array();\r\n            this.rigidBody = false;\r\n            this.bounce = 1;\r\n            this.dff = 0;//dynamic friction factor\r\n            this.static = false;\r\n            this.soft = true;\r\n            this.landed = false;\r\n            var sumX = 0, sumY = 0;\r\n            for (var i = 0; i < v.length; i++)\r\n            {\r\n                sumX += v[i].x;\r\n                sumY += v[i].y;\r\n                var j = (i + 1) % v.length;\r\n                this.E[i] = new Line(v[i], v[j]);\r\n            }\r\n            this.center = new Point(sumX / v.length, sumY / v.length);\r\n            this.position = this.center;\r\n        }\r\n        Polygon.createRect = function (x, y, width, height)\r\n        {\r\n            var v = [];\r\n            v[0] = new Point(x, y);\r\n            v[1] = new Point(x + width, y);\r\n            v[2] = new Point(x + width, y + height);\r\n            v[3] = new Point(x, y + height);\r\n            return new Polyon(v);\r\n        }\r\n        /*\r\n        Polygon.prototype.addLine=function(l)\r\n        {\r\n            if(!(l instanceof Line))\r\n                throw \"paramter is not a line.\";\r\n            if(!(this.E instanceof Array))\r\n            {\r\n                this.E=new Array();\r\n            }\r\n            this.E[this.E.length]=l;\r\n            l.polygon=this;\r\n            if(!(this.V instanceof Array))\r\n            {\r\n                this.V=new Array();\r\n            }\r\n            var existed=false;\r\n            for(var i=0;i<this.V.length;i++)\r\n            {\r\n                if(this.V[i].x==l.p1.x && this.V[i].y==l.p1.y)\r\n                {\r\n                    existed=true;\r\n                    break;\r\n                }\r\n            }\r\n            if(!existed)\r\n                this.V[this.V.length]=l.p1;\r\n            existed=false;\r\n            for(var i=0;i<this.V.length;i++)\r\n            {\r\n                if(this.V[i].x==l.p2.x && this.V[i].y==l.p2.y)\r\n                {\r\n                    existed=true;\r\n                    break;\r\n                }\r\n            }\r\n            if(!existed)\r\n                this.V[this.V.length]=l.p2;\r\n        }\r\n        */\r\n        Polygon.prototype.copy = function ()\r\n        {\r\n            var v = [];\r\n            for (var i = 0; i < this.V.length; i++)\r\n            {\r\n                v[i] = new Point(this.V[i].x, this.V[i].y);\r\n            }\r\n            var pol = new Polygon(v);\r\n            pol.strokeWidth = this.strokeWidth;\r\n            if (this.strokeStyle instanceof Color)\r\n                pol.strokeStyle = this.strokeStyle.copy();\r\n            else\r\n                pol.strokeStyle = this.strokeStyle;\r\n\r\n            if (this.fillStyle instanceof Color)\r\n                pol.fillStyle = this.fillStyle.copy();\r\n            else\r\n                pol.fillStyle = this.fillStyle;\r\n\r\n            pol.setCenter(this.center.x, this.center.y);\r\n            return pol;\r\n        }\r\n        Polygon.prototype.moveTo = function (x, y)\r\n        {\r\n            for (var i = 0; i < this.V.length; i++)\r\n            {\r\n                this.V[i].x = (this.V[i].x - this.center.x) + x;\r\n                this.V[i].y = (this.V[i].y - this.center.y) + y;\r\n            }\r\n            this.center.x = x;\r\n            this.center.y = y;\r\n        }\r\n        Polygon.prototype.setCenter = function (x, y)\r\n        {\r\n            this.center.x = x;\r\n            this.center.y = y;\r\n        }\r\n        Polygon.prototype.isCollideWith = function (col)\r\n        {\r\n            if (!(col instanceof Polygon) && !(col instanceof Circle))\r\n                throw new Error(\"The parameter is not a collider\");\r\n            if (!(this.E instanceof Array))\r\n            {\r\n                throw new Error(\"Something wrong with this polygon\");\r\n            }\r\n            if (col instanceof Polygon)\r\n            {\r\n                if (!(col.E instanceof Array))\r\n                {\r\n                    throw new Error(\"Something wrong with the polygon\");\r\n                }\r\n                for (var i = 0; i < this.E.length; i++)\r\n                    for (var j = 0; j < col.E.length; j++)\r\n                    {\r\n\r\n                        if (this.E[i].isCross(col.E[j]))\r\n                        {\r\n                            //Graphics.drawLine(this.E[i], \"red\");\r\n                            //Graphics.drawLine(col.E[j], \"red\");\r\n                            return true;\r\n                        }\r\n                    }\r\n                return false;\r\n            }\r\n            else if (col instanceof Circle)\r\n            {\r\n                for (var i = 0; i < this.E.length; i++)\r\n                {\r\n                    if (this.E[i].isCross(col))\r\n                        return true;\r\n                }\r\n                return false;\r\n            }\r\n            return false;\r\n        }\r\n        Polygon.prototype.render = function (graphics, x, y, r, dt)\r\n        {\r\n            graphics.beginPath();\r\n            if (this.V.length < 3)\r\n                throw new Error(\"The polygen must contains at least 3 points.\");\r\n            graphics.moveTo(this.V[0].x, this.V[0].y);\r\n            for (var i = 1; i < this.V.length; i++)\r\n                graphics.lineTo(this.V[i].x, this.V[i].y);\r\n            graphics.lineTo(this.V[0].x, this.V[0].y);\r\n            graphics.lineWidth = this.strokeWidth;\r\n            graphics.strokeStyle = this.strokeStyle;\r\n            graphics.fillStyle = this.fillStyle;\r\n            graphics.fill();\r\n            graphics.stroke();\r\n        }\r\n        Colliders.Polygon = Polygon;\r\n        window.Polygon = Polygon;\r\n\r\n        //-------Rectangle\r\n        function Rectangle(w, h)\r\n        {\r\n            w = isNaN(w) ? 0 : w;\r\n            h = isNaN(h) ? 0 : h;\r\n            this.width = w;\r\n            this.height = h;\r\n            this.o = new Point(0, 0);\r\n            this.position = new Point(w / 2, h / 2);\r\n            this.center = this.position;\r\n            this.rigidBody = false;\r\n            this.dff = 0;//dynamic friction factor\r\n            this.e = 1;\r\n            this.I = 1;//moment of inercial\r\n            this.mass = 1;\r\n            this.static = false;\r\n            this.soft = true;\r\n            this.landed = false;\r\n            this.fillStyle = new Color(255, 255, 255, 1);\r\n            this.strokeStyle = new Color(0, 0, 0, 1);\r\n            this.V = [\r\n                new Point(0, 0),\r\n                new Point(w, 0),\r\n                new Point(w, h),\r\n                new Point(0, h)];\r\n            this.E = [\r\n                    new Line(this.V[0], this.V[1]),\r\n                    new Line(this.V[1], this.V[2]),\r\n                    new Line(this.V[2], this.V[3]),\r\n                    new Line(this.V[3], this.V[0])];\r\n            for (var i = 0; i < 4; i++)\r\n            {\r\n                var p = this.V[i];\r\n                p.norV = new Vector2(p.x - this.center.x, p.y - this.center.y);\r\n                p.tanV = new Vector2(-p.norV.y, p.norV.x);\r\n            }\r\n            //Length\r\n            this.E[0].length = w;\r\n            this.E[1].length = h;\r\n            this.E[2].length = w;\r\n            this.E[3].length = h;\r\n            //Normal Vector\r\n            this.E[0].norV = new Vector2(0, -1);\r\n            this.E[1].norV = new Vector2(1, 0);\r\n            this.E[2].norV = new Vector2(0, 1);\r\n            this.E[3].norV = new Vector2(-1, 0);\r\n            //Tangent Vector\r\n            this.E[0].tanV = new Vector2(1, 0);\r\n            this.E[1].tanV = new Vector2(0, 1);\r\n            this.E[2].tanV = new Vector2(-1, 0);\r\n            this.E[3].tanV = new Vector2(0, -1);\r\n        }\r\n        Rectangle.prototype.copy = function ()\r\n        {\r\n            var rect = new Rectangle(this.width, this.height);\r\n            rect.o = this.o.copy();\r\n            rect.position = this.position.copy();\r\n            rect.rigidBody = this.rigidBody;\r\n            rect.bounce = this.bounce;\r\n            rect.dff = this.dff;\r\n            rect.static = this.static;\r\n            rect.soft = this.soft;\r\n            rect.landed = this.landed;\r\n            if (this.strokeStyle instanceof Color)\r\n                rect.strokeStyle = this.strokeStyle.copy();\r\n            else\r\n                rect.strokeStyle = this.strokeStyle;\r\n            if (this.fillStyle instanceof Color)\r\n                rect.fillStyle = this.fillStyle.copy();\r\n            else\r\n                rect.fillStyle = this.fillStyle;\r\n            return rect;\r\n        }\r\n        Rectangle.prototype.setCenter = function (x, y)\r\n        {\r\n            if (!isNaN(x) && !isNaN(y))\r\n            {\r\n                this.position.x = x;\r\n                this.position.y = y;\r\n            }\r\n            else\r\n            {\r\n                this.position.x = this.o.x + (x(this.width, this.height)).x;\r\n                this.position.y = this.o.y + this.height - (x(this.width, this.height)).y;\r\n            }\r\n        }\r\n        Rectangle.prototype.moveTo = function (x, y)\r\n        {\r\n            var dx = x - this.position.x;\r\n            var dy = y - this.position.y;\r\n            this.o.x += dx;\r\n            this.o.y += dy;\r\n            for (var i = 0; i < 4; i++)\r\n            {\r\n                this.V[i].x += dx;\r\n                this.V[i].y += dy;\r\n            }\r\n            this.position.x = x;\r\n            this.position.y = y;\r\n\r\n        }\r\n        Rectangle.prototype.setPosition = Rectangle.prototype.moveTo;\r\n        Rectangle.prototype.drawToCanvas = function (canvas, x, y, r, dt)\r\n        {\r\n            var ctx = canvas.getContext(\"2d\");\r\n            ctx.fillStyle = this.fillStyle;\r\n            ctx.strokeStyle = this.strokeStyle;\r\n            ctx.fillRect(this.o.x, this.o.y, this.width, this.height);\r\n            ctx.strokeRect(this.o.x, this.o.y, this.width, this.height);\r\n        }\r\n        Rectangle.prototype.render = function (graphic, x, y, r, dt)\r\n        {\r\n            graphic.fillStyle = this.fillStyle;\r\n            graphic.strokeStyle = this.strokeStyle;\r\n            graphic.fillRect(this.o.x, this.o.y + this.height, this.width, this.height);\r\n            graphic.strokeRect(this.o.x, this.o.y + this.height, this.width, this.height);\r\n        }\r\n        Rectangle.prototype.isCollideWith = function (obj)\r\n        {\r\n            if (obj instanceof Ground)\r\n            {\r\n                return (!(this.o.x > obj.xR || this.o.x + this.width < obj.xL) && (this.o.y >= obj.y && obj.y >= this.o.y - this.height));\r\n            }\r\n            else if (obj instanceof Wall)\r\n            {\r\n                return (!(this.o.y - this.height > obj.yH || this.o.y < obj.yL) && (this.o.x <= obj.x && obj.x <= this.o.x + this.width));\r\n            }\r\n            else if (obj instanceof Rectangle)\r\n            {\r\n                if (this.o.x - obj.width <= obj.o.x && obj.o.x <= this.o.x + this.width\r\n                 && this.o.y - obj.height <= obj.o.y && obj.o.y <= this.o.y + this.height)\r\n                    return true;\r\n                return false;\r\n                var x1 = (obj.o.x - this.o.x) * (obj.o.x + obj.width - this.o.x);\r\n                var x2 = (obj.o.x - (this.o.x + this.width)) * (obj.o.x + obj.width - (this.o.x + this.width));\r\n                var y1 = (obj.o.y - this.o.y) * (obj.o.y + obj.height - this.o.y);\r\n                var y2 = (obj.o.y - (this.o.y + this.height)) * (obj.o.y + obj.height - (this.o.y + this.height));\r\n                if (obj.o.x + obj.width < this.o.x || this.o.x + this.width < obj.o.x ||\r\n                   obj.o.y - obj.height > this.o.y || this.o.y - this.height > obj.o.y)\r\n                {\r\n                    return false;\r\n                }\r\n                else\r\n                    return true;\r\n            }\r\n            else if (obj instanceof Point)\r\n            {\r\n                if (this.o.x <= obj.x && obj.x <= this.o.x + this.width && this.o.y <= obj.y && obj.y <= this.o.y + this.height )\r\n                    return true;\r\n                else\r\n                    return false;\r\n            }\r\n            else if (obj instanceof Circle)\r\n                return obj.isCollideWith(this);\r\n        }\r\n        Rectangle.prototype.collide = function (self, target, dt)\r\n        {\r\n            if (self.collider.static && target.collider.static)\r\n                return;\r\n            if (target.collider instanceof Rectangle)\r\n            {\r\n                var args = new GameObject.CollideEventArgs();\r\n                args.dff = Math.min(self.collider.dff, target.collider.dff);\r\n                args.e = Math.min(self.collider.e, target.collider.e);\r\n                if (self.onCollide)\r\n                {\r\n                    args.target = target;\r\n                    self.onCollide(args);\r\n                    if (args.ignore)\r\n                        return;\r\n                }\r\n                if (target.onCollide)\r\n                {\r\n                    args.target = self;\r\n                    target.onCollide(args);\r\n                    if (args.ignore)\r\n                        return;\r\n                }\r\n                var dff = args.dff;\r\n                var e = args.e;\r\n                var dx = -1, dy = -1;\r\n                var v0 = self.v;\r\n                var v1 = new Vector2(0, 0);\r\n                var v2 = new Vector2(target.v.x - v0.x, target.v.y - v0.y);\r\n                var rect1 = self.collider;\r\n                var rect2 = target.collider;\r\n                var m1 = rect1.mass;\r\n                var m2 = rect2.mass;\r\n                /*if (rect1.o.x - rect2.width <= rect2.o.x && rect2.o.x <= rect1.o.x + rect1.width) \r\n                {\r\n                    var dBottom = rect1.o.y - (rect2.o.y + rect2.height);\r\n                    var dTop = (rect1.o.y + rect1.height) - rect2.o.y;\r\n                    if (Math.abs(dBottom) < Math.abs(dTop))\r\n                    {\r\n    \r\n                    }\r\n                }*/\r\n                if (target.v.x - self.v.x < 0)\r\n                {\r\n                    dx = Math.abs((rect1.o.x + rect1.width) - rect2.o.x); //Distance from rect1.right to rect2.left\r\n                }\r\n                else if (target.v.x - self.v.x > 0)\r\n                {\r\n                    dx = Math.abs((rect2.o.x + rect2.width) - rect1.o.x); //Distance from rect1.left to rect2.right\r\n                }\r\n                else if (target.v.x - self.v.x == 0)\r\n                {\r\n                    dx = Math.min(Math.abs(rect1.o.x + rect1.width - rect2.o.x), Math.abs(rect2.o.x + rect2.width - rect1.o.x)); //Get min distance\r\n                }\r\n                if (target.v.y - self.v.y < 0)\r\n                {\r\n                    dy = Math.abs((rect1.o.y + rect1.height) - rect2.o.y); //Distance from rect1.top to rect2.bottom\r\n                }\r\n                else if (target.v.y - self.v.y > 0)\r\n                {\r\n                    dy = Math.abs((rect2.o.y + rect2.height) - rect1.o.y); //Distance from rect1.bottom to rect2.top\r\n                }\r\n                else if (target.v.y - self.v.y == 0)\r\n                {\r\n                    dy = Math.min(Math.abs(rect1.o.y + rect1.height - rect2.o.y), Math.abs(rect2.o.y + rect2.height - rect1.o.y)); //Get min distance\r\n                }\r\n                if ((dx >= 0 && dx <= dy) || dy < 0) //Collide x\r\n                {\r\n                    if (!rect1.static && !rect2.static)\r\n                    {\r\n                        v1.x = v2.x * ((m2 + e * m2) / (m1 + m2));\r\n                        v2.x = v2.x * ((m2 - e * m1) / (m1 + m2));\r\n\r\n                        /*\r\n                        v2 = 2 * target.mass * v1 / (target.mass + self.mass);\r\n                        v1=(target.mass-self.mass)*v1/(target.mass+self.mass);\r\n                        v2+=self.v.x;\r\n                        v1+=self.v.x;*/\r\n                    }\r\n                    else if (rect1.static)\r\n                    {\r\n                        v2.x = -v2.x * e;\r\n                    }\r\n                    else //rect2.static = true\r\n                    {\r\n                        v1 = -v1.x * e;\r\n                    }\r\n                    v2.plus(v0);\r\n                    v1.plus(v0);\r\n                    var t = dx / Math.abs(self.v.x - target.v.x);\r\n                    t = isNaN(t) ? 0 : t;\r\n                    t > dt ? dt : t;\r\n                    self.v = v1;\r\n                    target.v = v2;\r\n                    if (!rect1.soft || !rect2.soft)\r\n                    {\r\n                        self.moveTo(self.position.x + v1.x * t, self.position.y);\r\n                        target.moveTo(target.position.x + v2.x * t, target.position.y);\r\n                        /*\r\n                        self.moveTo(self.position.x - (self.v.x * t) + (v1.x * (dt - t)), self.position.y);\r\n                        target.moveTo(target.position.x - (target.v.x * t) + (v2.x * (dt - t)), target.position.y);\r\n                        */\r\n                    }\r\n                }\r\n                else if ((dy >= 0 && dy <= dx) || dx < 0) //Collide y\r\n                {\r\n                    if (!rect1.static && !rect2.static)\r\n                    {\r\n                        v1.y = v2.y * ((m2 + e * m2) / (m1 + m2));\r\n                        v2.y = v2.y * ((m2 - e * m1) / (m1 + m2));\r\n                    }\r\n                    else if (rect1.static)\r\n                    {\r\n                        v2.y = -v2.y * e;\r\n                    }\r\n                    else //rect2.static = true\r\n                    {\r\n                        v1 = -v1.y * e;\r\n                    }\r\n                    v2.plus(v0);\r\n                    v1.plus(v0);\r\n                    var t = dy / Math.abs(self.v.y - target.v.y);\r\n                    t = isNaN(t) ? 0 : t;\r\n                    t > dt ? dt : t;\r\n                    self.v = v1;\r\n                    target.v = v2;\r\n                    if (!rect1.soft || !rect2.soft)\r\n                    {\r\n                        self.moveTo(self.position.x, self.position.y + v1.y * t);\r\n                        target.moveTo(target.position.x, target.position.y + v2.y * t);\r\n                    }\r\n                }\r\n            }\r\n            else if (target.collider instanceof Ground)\r\n            {\r\n                if (self.collider.o.y - self.collider.height <= target.collider.y)\r\n                {\r\n                    var t = (self.collider.o.y - self.collider.height - target.collider.y) / self.v.y;\r\n                    t = isNaN(t) ? 0 : t;\r\n                    self.moveTo(self.position.x, self.position.y - self.v.y * t);\r\n                    self.v.y = -self.v.y * self.collider.bounce;\r\n                    if (self.gravity)\r\n                        self.collider.landed = true;\r\n                }\r\n            }\r\n            else if (target.collider instanceof Wall)\r\n            {\r\n\r\n            }\r\n            else if (target.collider instanceof Circle)\r\n            {\r\n                return target.collider.collide(target, self, dt);\r\n            }\r\n        }\r\n        Colliders.Rectangle = Rectangle;\r\n        window.Rectangle = Rectangle;\r\n\r\n        //-------Ground\r\n        function Ground(y, xL, xR)\r\n        {\r\n            xL = isNaN(xL) ? 0 : xL;\r\n            xR = isNaN(xR) ? Number.MAX_SAFE_INTEGER : xR;\r\n            this.position = new Point(xL, y);\r\n            this.y = y;\r\n            this.width = xR - xL;\r\n            this.xL = xL;\r\n            this.xR = xR;\r\n            this.static = true;\r\n            this.rigidBody = true;\r\n        }\r\n        Ground.prototype.copy = function ()\r\n        {\r\n            var g = new Ground(this.y, this.xL, this.xR);\r\n            g.rigidBody = this.rigidBody;\r\n            g.static = this.static;\r\n            g.position = this.position.copy();\r\n            return g;\r\n        }\r\n        Ground.prototype.moveTo = function (x, y)\r\n        {\r\n            this.y = y;\r\n            this.position.x = x;\r\n            this.position.y = y;\r\n        }\r\n        Ground.prototype.setCenter = function (x, y, align)\r\n        {\r\n            this.y = y;\r\n            this.xL = x - align(this.xR - this.xL).x;\r\n            this.xR = this.xL + this.width;\r\n        }\r\n        Ground.prototype.drawToCanvas = function (canvas, x, y, r, dt)\r\n        {\r\n            return;\r\n            var ctx = canvas.getContext(\"2d\");\r\n            ctx.fillStyle = this.fillStyle;\r\n            ctx.strokeStyle = this.strokeStyle;\r\n            ctx.fillRect(this.center.x, this.center.y, canvas.width, this.height);\r\n            ctx.strokeRect(this.center.x, this.center.y, canvas.width, this.height);\r\n        }\r\n        Ground.prototype.render = function (graphics, x, y, r, dt)\r\n        {\r\n            return;\r\n        }\r\n        Ground.prototype.toGameObject = function ()\r\n        {\r\n            var obj = new GameObject();\r\n            obj.collider = this;\r\n            obj.graphic = this;\r\n            obj.mass = 1;\r\n            obj.gravity = false;\r\n            return obj;\r\n        }\r\n        Ground.prototype.isCollideWith = function (col)\r\n        {\r\n            if (col instanceof Rectangle)\r\n                return col.isCollideWith(this);\r\n            else if (col instanceof Circle)\r\n                return col.isCollideWith(this);\r\n        }\r\n        Ground.prototype.collide = function (ground, obj, dt)\r\n        {\r\n            if (obj.collider instanceof Rectangle)\r\n                return obj.collider.collide(obj, ground, dt);\r\n        }\r\n        Colliders.Ground = Ground;\r\n        window.Ground = Ground;\r\n\r\n        //-------Wall\r\n        function Wall(x, yL, yH)\r\n        {\r\n            yL = isNaN(yL) ? 0 : yL;\r\n            yH = isNaN(yH) ? Number.MAX_SAFE_INTEGER : yH;\r\n            this.x = x;\r\n            this.height = yH - yL;\r\n            this.yL = yL;\r\n            this.yH = yH;\r\n            this.static = true;\r\n            this.rigidBody = true;\r\n            this.position = new Point(x, yL);\r\n        }\r\n        Wall.prototype.copy = function ()\r\n        {\r\n            var w = new Wall(this.x, this.yL, this.yH);\r\n            w.rigidBody = this.rigidBody;\r\n            w.static = this.static;\r\n            w.position = this.position.copy();\r\n        }\r\n        Wall.prototype.toGameObject = function ()\r\n        {\r\n            var obj = new GameObject();\r\n            obj.collider = this;\r\n            obj.graphic = this;\r\n            obj.mass = 1;\r\n            obj.gravity = false;\r\n            return obj;\r\n        }\r\n        Wall.prototype.setCenter = function (x, y, align)\r\n        {\r\n            this.x = x;\r\n            this.yH = y + align(this.height);\r\n            this.yL = this.yH - this.height;\r\n            this.position.x = x;\r\n            this.position.y = y;\r\n        }\r\n        Wall.prototype.moveTo = function (x, y)\r\n        {\r\n            this.x += (x - this.position.x);\r\n            this.yH += (y - this.position.y);\r\n            this.yL += (y - this.position.y);\r\n            this.position.x = x;\r\n            this.position.y = y;\r\n        }\r\n        Wall.prototype.isCollideWith = function (col)\r\n        {\r\n            if (col instanceof Rectangle)\r\n                return col.isCollideWith(this);\r\n        }\r\n        Colliders.Wall = Wall;\r\n        window.Wall = Wall;\r\n\r\n        function OneWayGround()\r\n        {\r\n\r\n        }\r\n\r\n\r\n        engine.Colliders = Colliders;\r\n        window.Colliders = Colliders;\r\n        //----------------------\r\n\r\n        sar.Web.Engine2D = engine;\r\n        return sar;\r\n    } catch (ex) { alert(ex.message); }\r\n})(window.SardineFish);";
            sarEditor.LoadCode(code);
        }
    }
}
